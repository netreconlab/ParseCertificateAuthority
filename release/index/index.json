{
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecertificateauthority\/parsecertificatable\/certificate",
                "title" : "var certificate: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecertificateauthority\/parsecertificatable\/certificateid",
                "title" : "var certificateId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecertificateauthority\/parsecertificatable\/csr",
                "title" : "var csr: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecertificateauthority\/parsecertificatable\/rootcertificate",
                "title" : "var rootCertificate: String?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parsecertificateauthority\/parsecertificatable",
            "title" : "ParseCertificatable",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecertificateauthority\/parsecertificateauthorityconfiguration\/init(caurlstring:carootcertificatepath:cacertificatespath:causerspath:)",
                "title" : "init(caURLString: String, caRootCertificatePath: String, caCertificatesPath: String, caUsersPath: String) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecertificateauthority\/parsecertificateauthorityconfiguration\/cacertificatesurl",
                "title" : "var caCertificatesURL: URL",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecertificateauthority\/parsecertificateauthorityconfiguration\/carootcertificateurl",
                "title" : "var caRootCertificateURL: URL",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecertificateauthority\/parsecertificateauthorityconfiguration\/causerspathurl",
                "title" : "var caUsersPathURL: URL",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parsecertificateauthority\/parsecertificateauthorityconfiguration",
            "title" : "ParseCertificateAuthorityConfiguration",
            "type" : "struct"
          },
          {
            "title" : "Variables",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parsecertificateauthority\/configuration",
            "title" : "var configuration: ParseCertificateAuthorityConfiguration",
            "type" : "var"
          },
          {
            "title" : "Functions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parsecertificateauthority\/getcertificates(_:object:)",
            "title" : "func getCertificates<T, U>(T?, object: U?) async throws -> (String?, String?)",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parsecertificateauthority\/hascertificate(_:)",
            "title" : "func hasCertificate<T>(T?) -> Bool",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parsecertificateauthority\/hasrootcertificate(_:)",
            "title" : "func hasRootCertificate<T>(T?) -> Bool",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parsecertificateauthority\/initialize(configuration:)",
            "title" : "func initialize(configuration: ParseCertificateAuthorityConfiguration)",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parsecertificateauthority\/requestnewcertificates(_:object:)",
            "title" : "func requestNewCertificates<T, U>(T?, object: U?) async throws -> (String?, String?)",
            "type" : "func"
          }
        ],
        "path" : "\/documentation\/parsecertificateauthority",
        "title" : "ParseCertificateAuthority",
        "type" : "module"
      },
      {
        "path" : "\/documentation\/parsecertificateauthoritytests",
        "title" : "ParseCertificateAuthorityTests",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/init(cloudcode:)",
                "title" : "init(cloudCode: T)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/cloudcode",
                "title" : "var cloudCode: T",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/error",
                "title" : "var error: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/results",
                "title" : "var results: T.ReturnType?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/runfunction(options:)",
                "title" : "func runFunction(options: API.Options)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/startjob(options:)",
                "title" : "func startJob(options: API.Options)",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/cloudcodetype",
                "title" : "CloudViewModel.CloudCodeType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/cloudviewmodel\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/cloudviewmodel",
            "title" : "CloudViewModel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/init(serverurl:isdefault:notificationqueue:)",
                "title" : "init(serverURL: URL?, isDefault: Bool, notificationQueue: DispatchQueue) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/authenticationdelegate",
                "title" : "var authenticationDelegate: ParseLiveQueryDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/isconnected",
                "title" : "var isConnected: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/isconnecting",
                "title" : "var isConnecting: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/issocketestablished",
                "title" : "var isSocketEstablished: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/receivedelegate",
                "title" : "var receiveDelegate: ParseLiveQueryDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/close()",
                "title" : "func close()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/closeall()",
                "title" : "func closeAll()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/ispendingsubscription(_:)",
                "title" : "func isPendingSubscription<T>(Query<T>) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/issubscribed(_:)",
                "title" : "func isSubscribed<T>(Query<T>) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/open(isuserwantstoconnect:)",
                "title" : "func open(isUserWantsToConnect: Bool) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/open(isuserwantstoconnect:completion:)",
                "title" : "func open(isUserWantsToConnect: Bool, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/openpublisher(isuserwantstoconnect:)",
                "title" : "func openPublisher(isUserWantsToConnect: Bool) -> Future<Void, Error>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/removependingsubscription(_:)",
                "title" : "func removePendingSubscription<T>(Query<T>) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/sendping()",
                "title" : "func sendPing() async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/sendping(pongreceivehandler:)",
                "title" : "func sendPing(pongReceiveHandler: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/sendpingpublisher()",
                "title" : "func sendPingPublisher() -> Future<Void, Error>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/subscribe(_:)",
                "title" : "func subscribe<T>(T) throws -> T",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/client",
                "title" : "static var client: ParseLiveQuery?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/defaultclient",
                "title" : "class var defaultClient: ParseLiveQuery?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parselivequery",
            "title" : "ParseLiveQuery",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/init(query:)",
                "title" : "init(query: Query<T>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/count",
                "title" : "var count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/error",
                "title" : "var error: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/query",
                "title" : "var query: Query<T>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/results",
                "title" : "var results: [QueryViewModel<T>.Object]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/aggregate(_:options:)",
                "title" : "func aggregate([[String : Encodable]], options: API.Options)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/count(options:)",
                "title" : "func count(options: API.Options)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/find(options:)",
                "title" : "func find(options: API.Options)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/findall(batchlimit:options:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/first(options:)",
                "title" : "func first(options: API.Options)",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/object",
                "title" : "QueryViewModel.Object",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryviewmodel\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryviewmodel\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryviewmodel",
            "title" : "QueryViewModel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/init(query:)",
                "title" : "init(query: Query<T>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/event",
                "title" : "var event: (query: Query<T>, event: Event<T>)?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/subscribed",
                "title" : "var subscribed: (query: Query<T>, isNew: Bool)?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/unsubscribed",
                "title" : "var unsubscribed: Query<T>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/didreceive(_:)",
                "title" : "func didReceive(Data) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/didsubscribe(_:)",
                "title" : "func didSubscribe(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/didunsubscribe()",
                "title" : "func didUnsubscribe()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/subscription",
            "title" : "Subscription",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/init(query:)",
                "title" : "init(query: Query<T>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/query",
                "title" : "var query: Query<T>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/didreceive(_:)",
                "title" : "func didReceive(Data) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/didsubscribe(_:)",
                "title" : "func didSubscribe(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/didunsubscribe()",
                "title" : "func didUnsubscribe()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handle(_:_:)",
                "title" : "func handle((T) -> Event<T>, (Query<T>, T) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handleevent(_:)",
                "title" : "func handleEvent((Query<T>, Event<T>) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handlesubscribe(_:)",
                "title" : "func handleSubscribe((Query<T>, Bool) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handleunsubscribe(_:)",
                "title" : "func handleUnsubscribe((Query<T>) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/object",
                "title" : "SubscriptionCallback.Object",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/parseswift\/subscriptioncallback",
            "title" : "SubscriptionCallback",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/cloudcodetype",
                "title" : "CloudCodeType",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/init(cloudcode:)",
                "title" : "init(cloudCode: CloudCodeType)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/runfunction(options:)",
                "title" : "func runFunction(options: API.Options)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/startjob(options:)",
                "title" : "func startJob(options: API.Options)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/cloudobservable",
            "title" : "CloudObservable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/deletable\/deletingtype",
                "title" : "DeletingType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/deletable\/delete()-8ieqs",
                        "title" : "func delete() throws -> DeletingType",
                        "type" : "method"
                      }
                    ],
                    "title" : "Deletable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/deletable\/delete()-5tyw7",
                "title" : "func delete() throws -> DeletingType",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/delete(options:)-2crgq",
                        "title" : "func delete(options: API.Options) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/delete(options:)-u8rk",
                        "title" : "func delete(options: API.Options) async throws",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/deletable\/delete(options:)",
                "title" : "func delete(options: API.Options) throws -> DeletingType",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/deletable",
            "title" : "Deletable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/fetchable\/fetchingtype",
                "title" : "FetchingType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/fetchable\/fetch()-sa5a",
                        "title" : "func fetch() throws -> FetchingType",
                        "type" : "method"
                      }
                    ],
                    "title" : "Fetchable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/fetchable\/fetch()-1h0qk",
                "title" : "func fetch() throws -> FetchingType",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/fetch(includekeys:options:)-2hvwx",
                        "title" : "func fetch(includeKeys: [String]?, options: API.Options) throws -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/fetch(includekeys:options:)-9iop9",
                        "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/fetchable\/fetch(includekeys:options:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options) throws -> FetchingType",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/fetchable",
            "title" : "Fetchable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/acl",
                "title" : "var ACL: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/issaved",
                "title" : "var isSaved: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/objectid",
                "title" : "var objectId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/classname-swift.property",
                        "title" : "var className: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/classname-swift.type.property-499yb",
                        "title" : "static var className: String",
                        "type" : "property"
                      }
                    ],
                    "title" : "Objectable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/objectable\/classname-swift.type.property-7kg6w",
                "title" : "static var className: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/objectable",
            "title" : "Objectable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/authenticateduser",
                "title" : "AuthenticatedUser",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/islinked-7zura",
                        "title" : "var isLinked: Bool",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/islinked-82gc9",
                "title" : "var isLinked: Bool",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/islinked(with:)-7da5x",
                        "title" : "func isLinked(with: AuthenticatedUser) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/islinked(with:)-1by57",
                "title" : "func isLinked(with: AuthenticatedUser) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/link(authdata:options:)",
                "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/link(authdata:options:callbackqueue:completion:)",
                "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/linkpublisher(authdata:options:)",
                "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/login(authdata:options:callbackqueue:completion:)",
                "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/loginpublisher(authdata:options:)",
                "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/strip()-779dg",
                        "title" : "func strip()",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/strip()-18xgc",
                "title" : "func strip()",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/strip(_:)-80krh",
                        "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/strip(_:)-ovl0",
                "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:)-87j4",
                        "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:)-5hyok",
                "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:callbackqueue:completion:)-6aslp",
                        "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:callbackqueue:completion:)-7rp64",
                "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:)-2h790",
                        "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:)-8buh1",
                "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:callbackqueue:completion:)-372np",
                        "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:callbackqueue:completion:)-6gyvj",
                "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(_:options:)-1p5pj",
                        "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(_:options:)-2zjlv",
                "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(options:)-9jbvk",
                        "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(options:)-2wrer",
                "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseauthentication",
            "title" : "ParseAuthentication",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/parseswift\/parsecloudtypeable",
            "title" : "ParseCloudTypeable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclouduser\/sessiontoken",
                "title" : "var sessionToken: String?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseclouduser",
            "title" : "ParseCloudUser",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/returntype",
                "title" : "ReturnType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/functionjobname",
                "title" : "var functionJobName: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/viewmodel",
                "title" : "var viewModel: CloudViewModel<Self>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/runfunction(options:)-3xyp9",
                "title" : "func runFunction(options: API.Options) throws -> ReturnType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/runfunction(options:)-584mt",
                "title" : "func runFunction(options: API.Options) async throws -> ReturnType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/runfunction(options:callbackqueue:completion:)",
                "title" : "func runFunction(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ReturnType, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/runfunctionpublisher(options:)",
                "title" : "func runFunctionPublisher(options: API.Options) -> Future<ReturnType, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/startjob(options:)-9px5c",
                "title" : "func startJob(options: API.Options) async throws -> ReturnType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/startjob(options:)-9skq9",
                "title" : "func startJob(options: API.Options) throws -> ReturnType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/startjob(options:callbackqueue:completion:)",
                "title" : "func startJob(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ReturnType, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/startjobpublisher(options:)",
                "title" : "func startJobPublisher(options: API.Options) -> Future<ReturnType, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/viewmodel(_:)",
                "title" : "static func viewModel(Self) -> CloudViewModel<Self>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsecloudable",
            "title" : "ParseCloudable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/fetch(options:)-1i1bl",
                "title" : "func fetch(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/fetch(options:)-6cjty",
                "title" : "func fetch(options: API.Options) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/save(options:)-1dzaf",
                "title" : "func save(options: API.Options) async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/save(options:)-6mata",
                "title" : "func save(options: API.Options) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/save(options:callbackqueue:completion:)",
                "title" : "func save(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Bool, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/savepublisher(options:)",
                "title" : "func savePublisher(options: API.Options) -> Future<Bool, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/current",
                "title" : "static var current: Self?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseconfig",
            "title" : "ParseConfig",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseencodable\/debugdescription",
                "title" : "var debugDescription: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseencodable\/description",
                "title" : "var description: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseencodable",
            "title" : "ParseEncodable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parsefiletransferable\/makedummyuploadtask()-6r9at",
                        "title" : "func makeDummyUploadTask() throws -> URLSessionUploadTask",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseFileTransferable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/makedummyuploadtask()-71gc1",
                "title" : "func makeDummyUploadTask() throws -> URLSessionUploadTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parsefiletransferable\/makesuccessfuluploadresponse(_:url:)-52ukn",
                        "title" : "func makeSuccessfulUploadResponse(String, url: URL) throws -> (Data, HTTPURLResponse?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseFileTransferable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/makesuccessfuluploadresponse(_:url:)-h8xr",
                "title" : "func makeSuccessfulUploadResponse(String, url: URL) throws -> (Data, HTTPURLResponse?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/upload(with:from:completion:)",
                "title" : "func upload(with: URLRequest, from: Data?, completion: (Data?, URLResponse?, URLRequest?, Error?) -> Void) throws -> URLSessionUploadTask",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/upload(with:fromfile:completion:)",
                "title" : "func upload(with: URLRequest, fromFile: URL, completion: (Data?, URLResponse?, URLRequest?, Error?) -> Void) throws -> URLSessionUploadTask",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefiletransferable",
            "title" : "ParseFileTransferable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/init(name:url:)",
                "title" : "init(name: String, url: URL?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/functionname",
                "title" : "var functionName: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchall(options:)",
                "title" : "func fetchAll(options: API.Options) async throws -> [Self]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchall(options:callbackqueue:completion:)-swift.method",
                "title" : "func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchallpublisher(options:)",
                "title" : "func fetchAllPublisher(options: API.Options) -> Future<[Self], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/update(options:)",
                "title" : "func update(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/update(options:callbackqueue:completion:)",
                "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/updatepublisher(options:)",
                "title" : "func updatePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchall(options:callbackqueue:completion:)-swift.type.method",
                "title" : "static func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookfunctionable",
            "title" : "ParseHookFunctionable",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/parseswift\/parsehookparametable",
            "title" : "ParseHookParametable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/usertype",
                "title" : "UserType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/user",
                "title" : "var user: UserType?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/hydrateuser(options:)",
                "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/hydrateuser(options:callbackqueue:completion:)",
                "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/hydrateuserpublisher(options:)",
                "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/options()",
                "title" : "func options() -> API.Options",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookrequestable",
            "title" : "ParseHookRequestable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequestable\/clients",
                "title" : "var clients: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequestable\/triggername",
                "title" : "var triggerName: String?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerrequestable",
            "title" : "ParseHookTriggerRequestable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(classname:triggername:url:)",
                "title" : "init(className: String, triggerName: ParseHookTriggerType, url: URL)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(object:triggername:url:)",
                "title" : "init<T>(object: T, triggerName: ParseHookTriggerType, url: URL)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(triggername:url:)",
                "title" : "init(triggerName: ParseHookTriggerType, url: URL) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/classname",
                "title" : "var className: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/triggername",
                "title" : "var triggerName: ParseHookTriggerType?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchall(options:)",
                "title" : "func fetchAll(options: API.Options) async throws -> [Self]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchall(options:callbackqueue:completion:)-swift.method",
                "title" : "func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchallpublisher(options:)",
                "title" : "func fetchAllPublisher(options: API.Options) -> Future<[Self], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/update(options:)",
                "title" : "func update(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/update(options:callbackqueue:completion:)",
                "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/updatepublisher(options:)",
                "title" : "func updatePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchall(options:callbackqueue:completion:)-swift.type.method",
                "title" : "static func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerable",
            "title" : "ParseHookTriggerable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookable\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookable\/url",
                "title" : "var url: URL?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookable",
            "title" : "ParseHookable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/appidentifier",
                "title" : "var appIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/appname",
                "title" : "var appName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/appversion",
                "title" : "var appVersion: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/badge",
                "title" : "var badge: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/channels",
                "title" : "var channels: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/devicetoken",
                "title" : "var deviceToken: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/devicetype",
                "title" : "var deviceType: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/localeidentifier",
                "title" : "var localeIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/parseversion",
                "title" : "var parseVersion: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/timezone",
                "title" : "var timeZone: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/delete(options:)-4mmu1",
                "title" : "func delete(options: API.Options) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/delete(options:)-6rpv",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/fetch(includekeys:options:)-33xzq",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/fetch(includekeys:options:)-556ma",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/fetch(includekeys:options:callbackqueue:completion:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/replace(options:)",
                "title" : "func replace(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/replace(options:callbackqueue:completion:)",
                "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/replacepublisher(options:)",
                "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/save(ignoringcustomobjectidconfig:options:)-1somq",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/save(ignoringcustomobjectidconfig:options:)-2rxbm",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/save(options:)",
                "title" : "func save(options: API.Options) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/savepublisher(ignoringcustomobjectidconfig:options:)",
                "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/setdevicetoken(_:)",
                "title" : "func setDeviceToken(Data)",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/current",
                "title" : "static var current: Self?",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/become(_:copyentireinstallation:options:)",
                "title" : "static func become(String, copyEntireInstallation: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/become(_:copyentireinstallation:options:callbackqueue:completion:)",
                "title" : "static func become(String, copyEntireInstallation: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/becomepublisher(_:copyentireinstallation:options:)",
                "title" : "static func becomePublisher(String, copyEntireInstallation: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deleteobjckeychain(options:)",
                "title" : "static func deleteObjCKeychain(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deleteobjckeychain(options:callbackqueue:completion:)",
                "title" : "static func deleteObjCKeychain(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deleteobjckeychainpublisher(options:)",
                "title" : "static func deleteObjCKeychainPublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstallation\/classname",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseinstallation\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseinstallation",
            "title" : "ParseInstallation",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/closedsocket(_:reason:)-7npe",
                        "title" : "func closedSocket(URLSessionWebSocketTask.CloseCode?, reason: Data?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/closedsocket(_:reason:)-170q6",
                "title" : "func closedSocket(URLSessionWebSocketTask.CloseCode?, reason: Data?)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-1f3yl",
                        "title" : "func received(Error)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-798hl",
                        "title" : "func received(URLSessionTaskTransactionMetrics)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-3krd3",
                "title" : "func received(URLSessionTaskTransactionMetrics)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-798hl",
                        "title" : "func received(URLSessionTaskTransactionMetrics)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-1f3yl",
                        "title" : "func received(Error)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-4tgno",
                "title" : "func received(Error)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:completionhandler:)-o1ge",
                        "title" : "func received(URLAuthenticationChallenge, completionHandler: (URLSession.AuthChallengeDisposition, URLCredential?) -> Void)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:completionhandler:)-8g2o0",
                "title" : "func received(URLAuthenticationChallenge, completionHandler: (URLSession.AuthChallengeDisposition, URLCredential?) -> Void)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/receivedunsupported(_:socketmessage:)-6cmf4",
                        "title" : "func receivedUnsupported(Data?, socketMessage: URLSessionWebSocketTask.Message?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/receivedunsupported(_:socketmessage:)-83dzx",
                "title" : "func receivedUnsupported(Data?, socketMessage: URLSessionWebSocketTask.Message?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parselivequerydelegate",
            "title" : "ParseLiveQueryDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/init(objectid:)",
                "title" : "init(objectId: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/mergeable-96fqk",
                        "title" : "var mergeable: Self",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/mergeable-1pmms",
                "title" : "var mergeable: Self",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/operation",
                "title" : "var operation: ParseOperation<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/originaldata",
                "title" : "var originalData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation",
                "title" : "var relation: ParseRelation<Self>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/fetch(includekeys:options:callbackqueue:completion:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/get(_:)",
                "title" : "func get<W>(KeyPath<Self, W?>) throws -> W",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getdecoder()-swift.method",
                "title" : "func getDecoder() -> JSONDecoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getencoder()-swift.method",
                "title" : "func getEncoder() -> ParseEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getjsonencoder()-swift.method",
                "title" : "func getJSONEncoder() -> JSONEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/hassameobjectid(as:)",
                "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/isdirtyforkey(_:)",
                "title" : "func isDirtyForKey<W>(KeyPath<Self, W?>) throws -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseinstallation\/merge(with:)",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseInstallation Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/merge(with:)-4hjo0",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/merge(with:)",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseuser\/merge(with:)",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseUser Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/merge(with:)-6romo",
                "title" : "func merge(with: Self) throws -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseinstallation\/mergeparse(with:)",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseInstallation Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/mergeparse(with:)-6csd5",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/mergeparse(with:)",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseuser\/mergeparse(with:)",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseUser Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/mergeparse(with:)-9yft4",
                "title" : "func mergeParse(with: Self) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:child:)",
                "title" : "func relation<U>(String, child: U) throws -> ParseRelation<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:classname:)",
                "title" : "func relation(String, className: String) throws -> ParseRelation<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:)",
                "title" : "func relation(ParseRelation<Self>?, key: String) throws -> ParseRelation<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-swift.method-1w6vg",
                "title" : "func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-swift.method-4e4g",
                "title" : "func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/replace(options:)",
                "title" : "func replace(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/replace(options:callbackqueue:completion:)",
                "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/replacepublisher(options:)",
                "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/revert()",
                "title" : "func revert() throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/revert(_:)",
                "title" : "func revert<W>(WritableKeyPath<Self, W?>) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/save(ignoringcustomobjectidconfig:options:)-6rol8",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/save(ignoringcustomobjectidconfig:options:)-n7lr",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/savepublisher(ignoringcustomobjectidconfig:options:)",
                "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/set(_:to:)",
                "title" : "func set<W>(WritableKeyPath<Self, W?>, to: W) -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/shouldrestorekey(_:original:)-1tqz7",
                        "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/shouldrestorekey(_:original:)-9ntkl",
                "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/topointer()",
                "title" : "func toPointer() throws -> Pointer<Self>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/query",
                "title" : "static var query: Query<Self>",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getdecoder()-swift.type.method",
                "title" : "static func getDecoder() -> JSONDecoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getencoder()-swift.type.method",
                "title" : "static func getEncoder() -> ParseEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getjsonencoder()-swift.type.method",
                "title" : "static func getJSONEncoder() -> JSONEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/query(_:)-27shx",
                "title" : "static func query([QueryConstraint]) -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/query(_:)-3tnph",
                "title" : "static func query(QueryConstraint...) -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/queryrelations(_:parent:)-87cdn",
                "title" : "static func queryRelations<U>(String, parent: U) throws -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/queryrelations(_:parent:)-xpkl",
                "title" : "static func queryRelations<U>(String, parent: Pointer<U>) -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-swift.type.method-47yjk",
                "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-swift.type.method-98tek",
                "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseobject\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseobject\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseobject\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseobject",
            "title" : "ParseObject",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/delete(valuefor:)",
                "title" : "func delete(valueFor: String) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/deleteall()",
                "title" : "func deleteAll() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/get(valuefor:)",
                "title" : "func get<T>(valueFor: String) throws -> T?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/set(_:for:)",
                "title" : "func set<T>(T, for: String) throws",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseprimitivestorable",
            "title" : "ParsePrimitiveStorable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/alert",
                "title" : "var alert: ParsePushAppleAlert?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/category",
                "title" : "var category: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/collapseid",
                "title" : "var collapseId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/interruptionlevel",
                "title" : "var interruptionLevel: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/mdm",
                "title" : "var mdm: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/pushtype",
                "title" : "var pushType: ParsePushPayloadApple.PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/relevancescore",
                "title" : "var relevanceScore: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/targetcontentid",
                "title" : "var targetContentId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/threadid",
                "title" : "var threadId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/topic",
                "title" : "var topic: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/urlargs",
                "title" : "var urlArgs: [String]?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushapplepayloadable",
            "title" : "ParsePushApplePayloadable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/collapsekey",
                "title" : "var collapseKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/data",
                "title" : "var data: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/delaywhileidle",
                "title" : "var delayWhileIdle: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/dryrun",
                "title" : "var dryRun: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/notification",
                "title" : "var notification: ParsePushFirebaseNotification?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/restrictedpackagename",
                "title" : "var restrictedPackageName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/uri",
                "title" : "var uri: URL?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable",
            "title" : "ParsePushFirebasePayloadable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadable\/init()",
                "title" : "init()",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadable",
            "title" : "ParsePushPayloadable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/pushtype",
                "title" : "PushType",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/count",
                "title" : "var count: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/errormessage",
                "title" : "var errorMessage: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/expirationinterval",
                "title" : "var expirationInterval: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/expiry",
                "title" : "var expiry: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/failedpertype",
                "title" : "var failedPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/failedperutcoffset",
                "title" : "var failedPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/numfailed",
                "title" : "var numFailed: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/numsent",
                "title" : "var numSent: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/payload",
                "title" : "var payload: PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/pushhash",
                "title" : "var pushHash: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/pushtime",
                "title" : "var pushTime: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/query",
                "title" : "var query: QueryWhere?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/sentpertype",
                "title" : "var sentPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/sentperutcoffset",
                "title" : "var sentPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/status",
                "title" : "var status: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatusable\/classname",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushstatusable",
            "title" : "ParsePushStatusable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsequeryscorable\/score",
                "title" : "var score: Double?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsequeryscorable",
            "title" : "ParseQueryScorable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/roleuser",
                "title" : "RoleUser",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/init(name:)-3m5k4",
                        "title" : "init(name: String) throws",
                        "type" : "init"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/init(name:)-56bux",
                "title" : "init(name: String) throws",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/init(name:acl:)-8u3ui",
                        "title" : "init(name: String, acl: ParseACL) throws",
                        "type" : "init"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/init(name:acl:)-3h6fq",
                "title" : "init(name: String, acl: ParseACL) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/name",
                "title" : "var name: String?",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/roles-1kfkg",
                        "title" : "var roles: ParseRelation<Self>?",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/roles-7omk",
                "title" : "var roles: ParseRelation<Self>?",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/users-6uxer",
                        "title" : "var users: ParseRelation<Self>?",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/users-7o4v6",
                "title" : "var users: ParseRelation<Self>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/queryroles()",
                "title" : "func queryRoles() throws -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/queryusers()",
                "title" : "func queryUsers() throws -> Query<RoleUser>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserole\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserole\/classname",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parserole",
            "title" : "ParseRole",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/sessionuser",
                "title" : "SessionUser",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/createdwith",
                "title" : "var createdWith: [String : String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/expiresat",
                "title" : "var expiresAt: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/installationid",
                "title" : "var installationId: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/restricted",
                "title" : "var restricted: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/sessiontoken",
                "title" : "var sessionToken: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/user",
                "title" : "var user: SessionUser",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsesession\/classname",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsesession\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsesession",
            "title" : "ParseSession",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetypeable\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetypeable\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetypeable\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetypeable\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsetypeable",
            "title" : "ParseTypeable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/anonymous-swift.property",
                "title" : "var anonymous: ParseAnonymous<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/apple-swift.property",
                "title" : "var apple: ParseApple<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/authdata",
                "title" : "var authData: [String : [String : String]?]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/email",
                "title" : "var email: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/emailverified",
                "title" : "var emailVerified: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/facebook-swift.property",
                "title" : "var facebook: ParseFacebook<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/github-swift.property",
                "title" : "var github: ParseGitHub<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/google-swift.property",
                "title" : "var google: ParseGoogle<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/instagram-swift.property",
                "title" : "var instagram: ParseInstagram<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/ldap-swift.property",
                "title" : "var ldap: ParseLDAP<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/linkedin-swift.property",
                "title" : "var linkedin: ParseLinkedIn<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/password",
                "title" : "var password: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/sessiontoken",
                "title" : "var sessionToken: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/spotify-swift.property",
                "title" : "var spotify: ParseSpotify<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/twitter-swift.property",
                "title" : "var twitter: ParseTwitter<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/username",
                "title" : "var username: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:)-1naqv",
                "title" : "func become(sessionToken: String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:)-1s96n",
                "title" : "func become(sessionToken: String, options: API.Options) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:callbackqueue:completion:)-swift.method",
                "title" : "func become(sessionToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/becomepublisher(sessiontoken:options:)",
                "title" : "func becomePublisher(sessionToken: String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/delete(options:)-3vgtv",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/delete(options:)-64lxm",
                "title" : "func delete(options: API.Options) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/fetch(includekeys:options:)-12t7t",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/fetch(includekeys:options:)-6evh2",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/fetch(includekeys:options:callbackqueue:completion:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/islinked(with:)",
                "title" : "func isLinked(with: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/replace(options:)",
                "title" : "func replace(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/replace(options:callbackqueue:completion:)",
                "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/replacepublisher(options:)",
                "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/save(ignoringcustomobjectidconfig:options:)-36qoi",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/save(ignoringcustomobjectidconfig:options:)-46n25",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/save(options:)",
                "title" : "func save(options: API.Options) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/savepublisher(options:ignoringcustomobjectidconfig:)",
                "title" : "func savePublisher(options: API.Options, ignoringCustomObjectIdConfig: Bool) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(options:)-1tz6b",
                "title" : "func signup(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(options:)-8x6w8",
                "title" : "func signup(options: API.Options) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(options:callbackqueue:completion:)",
                "title" : "func signup(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signuppublisher(options:)",
                "title" : "func signupPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/strip(_:)",
                "title" : "func strip(String) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/unlink(_:options:)",
                "title" : "func unlink(String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/unlink(_:options:callbackqueue:completion:)",
                "title" : "func unlink(String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/unlinkpublisher(_:options:)",
                "title" : "func unlinkPublisher(String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/anonymous-swift.type.property",
                "title" : "static var anonymous: ParseAnonymous<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/apple-swift.type.property",
                "title" : "static var apple: ParseApple<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/current",
                "title" : "static var current: Self?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/facebook-swift.type.property",
                "title" : "static var facebook: ParseFacebook<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/github-swift.type.property",
                "title" : "static var github: ParseGitHub<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/google-swift.type.property",
                "title" : "static var google: ParseGoogle<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/instagram-swift.type.property",
                "title" : "static var instagram: ParseInstagram<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/ldap-swift.type.property",
                "title" : "static var ldap: ParseLDAP<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/linkedin-swift.type.property",
                "title" : "static var linkedin: ParseLinkedIn<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/spotify-swift.type.property",
                "title" : "static var spotify: ParseSpotify<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/twitter-swift.type.property",
                "title" : "static var twitter: ParseTwitter<Self>",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:callbackqueue:completion:)-swift.type.method",
                "title" : "static func become(sessionToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/link(_:authdata:options:)-3utca",
                "title" : "static func link(String, authData: [String : String], options: API.Options) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/link(_:authdata:options:)-cniv",
                "title" : "static func link(String, authData: [String : String], options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/link(_:authdata:options:callbackqueue:completion:)",
                "title" : "static func link(String, authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/linkpublisher(_:authdata:options:)",
                "title" : "static func linkPublisher(String, authData: [String : String], options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(_:authdata:options:)-44ibt",
                "title" : "static func login(String, authData: [String : String], options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(_:authdata:options:)-7qe5w",
                "title" : "static func login(String, authData: [String : String], options: API.Options) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(_:authdata:options:callbackqueue:completion:)",
                "title" : "static func login(String, authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(username:password:options:)-6vn6t",
                "title" : "static func login(username: String, password: String, options: API.Options) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(username:password:options:)-8l8z5",
                "title" : "static func login(username: String, password: String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(username:password:options:callbackqueue:completion:)",
                "title" : "static func login(username: String, password: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginpublisher(_:authdata:options:)",
                "title" : "static func loginPublisher(String, authData: [String : String], options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginpublisher(username:password:options:)",
                "title" : "static func loginPublisher(username: String, password: String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginusingobjckeychain(options:)",
                "title" : "static func loginUsingObjCKeychain(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginusingobjckeychain(options:callbackqueue:completion:)",
                "title" : "static func loginUsingObjCKeychain(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginusingobjckeychainpublisher(options:)",
                "title" : "static func loginUsingObjCKeychainPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/logout(options:)-4ot9b",
                "title" : "static func logout(options: API.Options) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/logout(options:)-5l3vm",
                "title" : "static func logout(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/logout(options:callbackqueue:completion:)",
                "title" : "static func logout(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/logoutpublisher(options:)",
                "title" : "static func logoutPublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/passwordreset(email:options:)-6zwm1",
                "title" : "static func passwordReset(email: String, options: API.Options) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/passwordreset(email:options:)-8stvt",
                "title" : "static func passwordReset(email: String, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/passwordreset(email:options:callbackqueue:completion:)",
                "title" : "static func passwordReset(email: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/passwordresetpublisher(email:options:)",
                "title" : "static func passwordResetPublisher(email: String, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(username:password:options:)-1v5qq",
                "title" : "static func signup(username: String, password: String, options: API.Options) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(username:password:options:)-8x6os",
                "title" : "static func signup(username: String, password: String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(username:password:options:callbackqueue:completion:)",
                "title" : "static func signup(username: String, password: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signuppublisher(username:password:options:)",
                "title" : "static func signupPublisher(username: String, password: String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verificationemail(email:options:)-1ya7v",
                "title" : "static func verificationEmail(email: String, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verificationemail(email:options:)-3e3gg",
                "title" : "static func verificationEmail(email: String, options: API.Options) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verificationemail(email:options:callbackqueue:completion:)",
                "title" : "static func verificationEmail(email: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verificationemailpublisher(email:options:)",
                "title" : "static func verificationEmailPublisher(email: String, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verifypassword(password:usingpost:options:)",
                "title" : "static func verifyPassword(password: String, usingPost: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verifypassword(password:usingpost:options:callbackqueue:completion:)",
                "title" : "static func verifyPassword(password: String, usingPost: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verifypasswordpublisher(password:usingpost:options:)",
                "title" : "static func verifyPasswordPublisher(password: String, usingPost: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseuser\/classname",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseuser\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseuser",
            "title" : "ParseUser",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/object",
                "title" : "Object",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/init(query:)",
                "title" : "init(query: Query<Object>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/query",
                "title" : "var query: Query<Object>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/aggregate(_:options:)",
                "title" : "func aggregate([[String : Encodable]], options: API.Options)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/count(options:)",
                "title" : "func count(options: API.Options)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/find(options:)",
                "title" : "func find(options: API.Options)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/findall(batchlimit:options:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/first(options:)",
                "title" : "func first(options: API.Options)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryobservable",
            "title" : "QueryObservable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/object",
                "title" : "Object",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/init(query:)",
                "title" : "init(query: Query<Object>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/query",
                "title" : "var query: Query<Object>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/didreceive(_:)",
                "title" : "func didReceive(Data) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/didsubscribe(_:)",
                "title" : "func didSubscribe(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/didunsubscribe()",
                "title" : "func didUnsubscribe()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/querysubscribable",
            "title" : "QuerySubscribable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/resulttype",
                "title" : "ResultType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/count(options:)",
                "title" : "func count(options: API.Options) throws -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/count(options:callbackqueue:completion:)",
                "title" : "func count(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Int, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/find(options:)",
                "title" : "func find(options: API.Options) throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/find(options:callbackqueue:completion:)",
                "title" : "func find(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/first(options:)",
                "title" : "func first(options: API.Options) throws -> ResultType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/first(options:callbackqueue:completion:)",
                "title" : "func first(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ResultType, ParseError>) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryable",
            "title" : "Queryable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/savable\/savingtype",
                "title" : "SavingType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/savable\/save()-28dnb",
                        "title" : "func save() throws -> SavingType",
                        "type" : "method"
                      }
                    ],
                    "title" : "Savable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/savable\/save()-3stwk",
                "title" : "func save() throws -> SavingType",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/save(options:)",
                        "title" : "func save(options: API.Options) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/savable\/save(options:)",
                "title" : "func save(options: API.Options) throws -> SavingType",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/savable",
            "title" : "Savable",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/api\/options",
                "title" : "API.Options",
                "type" : "typealias"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/==(_:_:)",
                    "title" : "static func == (API.Option, API.Option) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/cachepolicy(_:)",
                    "title" : "case cachePolicy(URLRequest.CachePolicy)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/context(_:)",
                    "title" : "case context(Encodable)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/filesize(_:)",
                    "title" : "case fileSize(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/installationid(_:)",
                    "title" : "case installationId(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/metadata(_:)",
                    "title" : "case metadata([String : String])",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/mimetype(_:)",
                    "title" : "case mimeType(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/removemimetype",
                    "title" : "case removeMimeType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/serverurl(_:)",
                    "title" : "case serverURL(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/sessiontoken(_:)",
                    "title" : "case sessionToken(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/tags(_:)",
                    "title" : "case tags([String : String])",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/useprimarykey",
                    "title" : "case usePrimaryKey",
                    "type" : "case"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/api\/option\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/api\/option\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/api\/option",
                "title" : "API.Option",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/parseswift\/api",
            "title" : "API",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/publicread",
                "title" : "var publicRead: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/publicwrite",
                "title" : "var publicWrite: Bool",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(objectid:)",
                "title" : "func getReadAccess(objectId: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(role:)",
                "title" : "func getReadAccess<T>(role: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(rolename:)",
                "title" : "func getReadAccess(roleName: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(user:)",
                "title" : "func getReadAccess<T>(user: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(objectid:)",
                "title" : "func getWriteAccess(objectId: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(role:)",
                "title" : "func getWriteAccess<T>(role: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(rolename:)",
                "title" : "func getWriteAccess(roleName: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(user:)",
                "title" : "func getWriteAccess<T>(user: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(objectid:value:)",
                "title" : "func setReadAccess(objectId: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(role:value:)",
                "title" : "func setReadAccess<T>(role: T, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(rolename:value:)",
                "title" : "func setReadAccess(roleName: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(user:value:)",
                "title" : "func setReadAccess<T>(user: T, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(objectid:value:)",
                "title" : "func setWriteAccess(objectId: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(role:value:)",
                "title" : "func setWriteAccess<T>(role: T, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(rolename:value:)",
                "title" : "func setWriteAccess(roleName: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(user:value:)",
                "title" : "func setWriteAccess<T>(user: T, value: Bool)",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/defaultacl()",
                "title" : "static func defaultACL() throws -> ParseACL",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setdefaultacl(_:withaccessforcurrentuser:)",
                "title" : "static func setDefaultACL(ParseACL, withAccessForCurrentUser: Bool) throws -> ParseACL",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/read",
                    "title" : "case read",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/write",
                    "title" : "case write",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(from:)-630fw",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(intvalue:)",
                    "title" : "init?(intValue: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(stringvalue:)",
                    "title" : "init?(stringValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/codingkey-implementations",
                    "title" : "CodingKey Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/init(from:)-3nwp2",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/access",
                "title" : "ParseACL.Access",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseacl",
            "title" : "ParseACL",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/init(name:dimensions:at:)",
                "title" : "init(name: String, dimensions: [String : Codable]?, at: Date?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/date",
                "title" : "var date: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/dimensions",
                "title" : "var dimensions: [String : Codable]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/name",
                "title" : "var name: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(dimensions:at:options:)",
                "title" : "func track(dimensions: [String : String]?, at: Date?, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(dimensions:at:options:callbackqueue:completion:)",
                "title" : "func track(dimensions: [String : String]?, at: Date?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(options:)",
                "title" : "func track(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(options:callbackqueue:completion:)",
                "title" : "func track(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackpublisher(dimensions:at:options:)",
                "title" : "func trackPublisher(dimensions: [String : String]?, at: Date?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackpublisher(options:)",
                "title" : "func trackPublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopened(dimensions:at:options:)",
                "title" : "static func trackAppOpened(dimensions: [String : String]?, at: Date?, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopened(dimensions:at:options:callbackqueue:completion:)",
                "title" : "static func trackAppOpened(dimensions: [String : String]?, at: Date?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopened(launchoptions:at:options:)",
                "title" : "static func trackAppOpened(launchOptions: [UIApplication.LaunchOptionsKey : Any]?, at: Date?, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopened(launchoptions:at:options:callbackqueue:completion:)",
                "title" : "static func trackAppOpened(launchOptions: [UIApplication.LaunchOptionsKey : Any]?, at: Date?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopenedpublisher(dimensions:at:options:)",
                "title" : "static func trackAppOpenedPublisher(dimensions: [String : String]?, at: Date?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopenedpublisher(launchoptions:at:options:)",
                "title" : "static func trackAppOpenedPublisher(launchOptions: [UIApplication.LaunchOptionsKey : Any]?, at: Date?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseanalytics",
            "title" : "ParseAnalytics",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/login(authdata:options:)-26wxs",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/login(authdata:options:)-5qmf7",
                "title" : "func login(authData: [String : String], options: API.Options) throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/login(options:)-8u5g4",
                "title" : "func login(options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/login(options:)-97osl",
                "title" : "func login(options: API.Options) throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/login(options:callbackqueue:completion:)",
                "title" : "func login(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/loginpublisher(options:)",
                "title" : "func loginPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/islinked",
                    "title" : "var isLinked: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/islinked(with:)",
                    "title" : "func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/strip()",
                    "title" : "func strip()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanonymous\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseanonymous",
            "title" : "ParseAnonymous",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/link(user:identitytoken:options:)",
                "title" : "func link(user: String, identityToken: Data, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/link(user:identitytoken:options:callbackqueue:completion:)",
                "title" : "func link(user: String, identityToken: Data, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/linkpublisher(user:identitytoken:options:)",
                "title" : "func linkPublisher(user: String, identityToken: Data, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/login(user:identitytoken:options:)",
                "title" : "func login(user: String, identityToken: Data, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/login(user:identitytoken:options:callbackqueue:completion:)",
                "title" : "func login(user: String, identityToken: Data, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/loginpublisher(user:identitytoken:options:)",
                "title" : "func loginPublisher(user: String, identityToken: Data, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/islinked",
                    "title" : "var isLinked: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/islinked(with:)",
                    "title" : "func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/strip()",
                    "title" : "func strip()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseapple\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseapple",
            "title" : "ParseApple",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsebytes\/init(base64:)",
                "title" : "init(base64: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsebytes\/init(data:)",
                "title" : "init(data: Data)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsebytes\/base64",
                "title" : "let base64: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsebytes",
            "title" : "ParseBytes",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/init(requiresauthentication:publicaccess:)",
                "title" : "init(requiresAuthentication: Bool, publicAccess: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/protectedfields",
                "title" : "var protectedFields: [String : Set<String>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/readuserfields",
                "title" : "var readUserFields: Set<String>?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/writeuserfields",
                "title" : "var writeUserFields: Set<String>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addpointerfields(_:on:)",
                "title" : "func addPointerFields(Set<String>, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-2hwwg",
                "title" : "func addProtectedFields(Set<String>, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-3ld7d",
                "title" : "func addProtectedFields<U>(Set<String>, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-6fcbm",
                "title" : "func addProtectedFields<U>(Set<String>, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-7mmnw",
                "title" : "func addProtectedFields<R>(Set<String>, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfieldspublic(_:)",
                "title" : "func addProtectedFieldsPublic(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfieldsrequiresauthentication(_:)",
                "title" : "func addProtectedFieldsRequiresAuthentication(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfieldsuser(_:userfield:)",
                "title" : "func addProtectedFieldsUser(Set<String>, userField: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getpointerfields(_:)",
                "title" : "func getPointerFields(Action) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-1ibkv",
                "title" : "func getProtectedFields<R>(R) throws -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-35eqy",
                "title" : "func getProtectedFields(String) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-3oyee",
                "title" : "func getProtectedFields<U>(Pointer<U>) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-6ueex",
                "title" : "func getProtectedFields<U>(U) throws -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfieldspublic()",
                "title" : "func getProtectedFieldsPublic() -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfieldsrequiresauthentication()",
                "title" : "func getProtectedFieldsRequiresAuthentication() -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfieldsuser(_:)",
                "title" : "func getProtectedFieldsUser(String) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-37b9k",
                "title" : "func hasAccess<U>(Action, for: U) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-7qp10",
                "title" : "func hasAccess<R>(Action, for: R) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-94bwb",
                "title" : "func hasAccess(Action, for: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-msxs",
                "title" : "func hasAccess<U>(Action, for: Pointer<U>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccesspublic(_:)",
                "title" : "func hasAccessPublic(Action) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccessrequiresauthentication(_:)",
                "title" : "func hasAccessRequiresAuthentication(Action) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-31rh7",
                "title" : "func hasReadAccess<U>(Pointer<U>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-4yuat",
                "title" : "func hasReadAccess<R>(R) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-7lyeb",
                "title" : "func hasReadAccess(String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-bbom",
                "title" : "func hasReadAccess<U>(U) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccesspublic()",
                "title" : "func hasReadAccessPublic() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccessrequiresauthentication()",
                "title" : "func hasReadAccessRequiresAuthentication() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-5ldwm",
                "title" : "func hasWriteAccess<R>(R, checkAddField: Bool) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-7ov62",
                "title" : "func hasWriteAccess(String, checkAddField: Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-8k62f",
                "title" : "func hasWriteAccess<U>(Pointer<U>, checkAddField: Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-9svo4",
                "title" : "func hasWriteAccess<U>(U, checkAddField: Bool) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccesspublic(_:)",
                "title" : "func hasWriteAccessPublic(Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccessrequiresauthentication(_:)",
                "title" : "func hasWriteAccessRequiresAuthentication(Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removepointerfields(_:on:)",
                "title" : "func removePointerFields(Set<String>, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-4w6oa",
                "title" : "func removeProtectedFields<R>(Set<String>, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-7qajb",
                "title" : "func removeProtectedFields<U>(Set<String>, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-8it6u",
                "title" : "func removeProtectedFields<U>(Set<String>, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-9c9jl",
                "title" : "func removeProtectedFields(Set<String>, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfieldspublic(_:)",
                "title" : "func removeProtectedFieldsPublic(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfieldsrequiresauthentication(_:)",
                "title" : "func removeProtectedFieldsRequiresAuthentication(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfieldsuser(_:userfield:)",
                "title" : "func removeProtectedFieldsUser(Set<String>, userField: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-1fd37",
                "title" : "func setAccess(Bool, on: Action, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-2clcm",
                "title" : "func setAccess<R>(Bool, on: Action, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-b3t7",
                "title" : "func setAccess<U>(Bool, on: Action, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-z0aw",
                "title" : "func setAccess<U>(Bool, on: Action, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccesspublic(_:on:)",
                "title" : "func setAccessPublic(Bool, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccessrequiresauthentication(_:on:)",
                "title" : "func setAccessRequiresAuthentication(Bool, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setpointerfields(_:on:)",
                "title" : "func setPointerFields(Set<String>, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-2fsdg",
                "title" : "func setProtectedFields(Set<String>, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-3ewb1",
                "title" : "func setProtectedFields<U>(Set<String>, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-46xeu",
                "title" : "func setProtectedFields<U>(Set<String>, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-7w0s5",
                "title" : "func setProtectedFields<R>(Set<String>, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:userfield:)",
                "title" : "func setProtectedFields(Set<String>, userField: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfieldspublic(_:)",
                "title" : "func setProtectedFieldsPublic(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfieldsrequiresauthentication(_:)",
                "title" : "func setProtectedFieldsRequiresAuthentication(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-3nc5c",
                "title" : "func setReadAccess<R>(Bool, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-464o",
                "title" : "func setReadAccess<U>(Bool, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-4q3c9",
                "title" : "func setReadAccess(Bool, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-6ssgv",
                "title" : "func setReadAccess<U>(Bool, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccesspublic(_:)",
                "title" : "func setReadAccessPublic(Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccessrequiresauthentication(_:canaddfield:)",
                "title" : "func setReadAccessRequiresAuthentication(Bool, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-3axhs",
                "title" : "func setWriteAccess<U>(Bool, for: Pointer<U>, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-4gvup",
                "title" : "func setWriteAccess<U>(Bool, for: U, canAddField: Bool) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-4ws0r",
                "title" : "func setWriteAccess(Bool, for: String, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-5qka",
                "title" : "func setWriteAccess<R>(Bool, for: R, canAddField: Bool) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccesspublic(_:canaddfield:)",
                "title" : "func setWriteAccessPublic(Bool, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccessrequiresauthentication(_:canaddfield:)",
                "title" : "func setWriteAccessRequiresAuthentication(Bool, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/addfield",
                    "title" : "case addField",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/count",
                    "title" : "case count",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/create",
                    "title" : "case create",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/delete",
                    "title" : "case delete",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/find",
                    "title" : "case find",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/get",
                    "title" : "case get",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/update",
                    "title" : "case update",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseclp\/action\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/action",
                "title" : "ParseCLP.Action",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseclp",
            "title" : "ParseCLP",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/init(applicationid:clientkey:primarykey:webhookkey:serverurl:livequeryserverurl:requiringcustomobjectids:usingtransactions:usingequalqueryconstraint:usingpostforquery:primitivestore:requestcachepolicy:cachememorycapacity:cachediskcapacity:u-81oic",
                "title" : "init(applicationId: String, clientKey: String?, primaryKey: String?, webhookKey: String?, serverURL: URL, liveQueryServerURL: URL?, requiringCustomObjectIds: Bool, usingTransactions: Bool, usingEqualQueryConstraint: Bool, usingPostForQuery: Bool, primitiveStore: ParsePrimitiveStorable?, requestCachePolicy: URLRequest.CachePolicy, cacheMemoryCapacity: Int, cacheDiskCapacity: Int, usingDataProtectionKeychain: Bool, deletingKeychainIfNeeded: Bool, httpAdditionalHeaders: [AnyHashable : Any]?, maxConnectionAttempts: Int, liveQueryMaxConnectionAttempts: Int, parseFileTransfer: ParseFileTransferable?, authentication: ((URLAuthenticationChallenge, (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) -> Void)?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/applicationid",
                "title" : "var applicationId: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/cachediskcapacity",
                "title" : "var cacheDiskCapacity: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/cachememorycapacity",
                "title" : "var cacheMemoryCapacity: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/clientkey",
                "title" : "var clientKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/httpadditionalheaders",
                "title" : "var httpAdditionalHeaders: [AnyHashable : Any]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isdeletingkeychainifneeded",
                "title" : "var isDeletingKeychainIfNeeded: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/ismigratingfromobjcsdk",
                "title" : "var isMigratingFromObjcSDK: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isrequiringcustomobjectids",
                "title" : "var isRequiringCustomObjectIds: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingdataprotectionkeychain",
                "title" : "var isUsingDataProtectionKeychain: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingequalqueryconstraint",
                "title" : "var isUsingEqualQueryConstraint: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingpostforquery",
                "title" : "var isUsingPostForQuery: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingtransactions",
                "title" : "var isUsingTransactions: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/livequerymaxconnectionattempts",
                "title" : "var liveQueryMaxConnectionAttempts: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/livequerysserverurl",
                "title" : "var liveQuerysServerURL: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/maxconnectionattempts",
                "title" : "var maxConnectionAttempts: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/parsefiletransfer",
                "title" : "var parseFileTransfer: ParseFileTransferable",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/primarykey",
                "title" : "var primaryKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/requestcachepolicy",
                "title" : "var requestCachePolicy: URLRequest.CachePolicy",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/serverurl",
                "title" : "var serverURL: URL",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseconfiguration",
            "title" : "ParseConfiguration",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseencoder\/encode(_:skipkeys:)",
                "title" : "func encode<T>(T, skipKeys: SkipKeys) throws -> Data",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/cloud",
                    "title" : "case cloud",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/custom(_:)",
                    "title" : "case custom(Set<String>)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/customobjectid",
                    "title" : "case customObjectId",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/none",
                    "title" : "case none",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/object",
                    "title" : "case object",
                    "type" : "case"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys",
                "title" : "ParseEncoder.SkipKeys",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseencoder",
            "title" : "ParseEncoder",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/init(code:message:)",
                "title" : "init(code: Code, message: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/init(othercode:message:)",
                "title" : "init(otherCode: Int, message: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/code-swift.property",
                "title" : "let code: Code",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/message",
                "title" : "let message: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/othercode",
                "title" : "let otherCode: Int?",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/accountalreadylinked",
                    "title" : "case accountAlreadyLinked",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/aggregateerror",
                    "title" : "case aggregateError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/cachemiss",
                    "title" : "case cacheMiss",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/changedimmutablefielderror",
                    "title" : "case changedImmutableFieldError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/clientdisconnected",
                    "title" : "case clientDisconnected",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/commandunavailable",
                    "title" : "case commandUnavailable",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/connectionfailed",
                    "title" : "case connectionFailed",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/duplicaterequest",
                    "title" : "case duplicateRequest",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/duplicatevalue",
                    "title" : "case duplicateValue",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/exceededquota",
                    "title" : "case exceededQuota",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filedeletefailure",
                    "title" : "case fileDeleteFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filedeleteunnamedfailure",
                    "title" : "case fileDeleteUnnamedFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filereaderror",
                    "title" : "case fileReadError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filesavefailure",
                    "title" : "case fileSaveFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filetoolarge",
                    "title" : "case fileTooLarge",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/hostingerror",
                    "title" : "case hostingError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/incorrecttype",
                    "title" : "case incorrectType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/inefficientqueryerror",
                    "title" : "case inefficientQueryError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/internalserver",
                    "title" : "case internalServer",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidacl",
                    "title" : "case invalidACL",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidauthdataerror",
                    "title" : "case invalidAuthDataError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidchannelname",
                    "title" : "case invalidChannelName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidchannelsarrayerror",
                    "title" : "case invalidChannelsArrayError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidclassname",
                    "title" : "case invalidClassName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidcontentlength",
                    "title" : "case invalidContentLength",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invaliddevicetoken",
                    "title" : "case invalidDeviceToken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invaliddevicetypeerror",
                    "title" : "case invalidDeviceTypeError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidemailaddress",
                    "title" : "case invalidEmailAddress",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalideventname",
                    "title" : "case invalidEventName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidexpirationerror",
                    "title" : "case invalidExpirationError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidfilename",
                    "title" : "case invalidFileName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidimagedata",
                    "title" : "case invalidImageData",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidinstallationiderror",
                    "title" : "case invalidInstallationIdError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidjson",
                    "title" : "case invalidJSON",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidkeyname",
                    "title" : "case invalidKeyName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidlimiterror",
                    "title" : "case invalidLimitError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidlinkedsession",
                    "title" : "case invalidLinkedSession",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidnestedkey",
                    "title" : "case invalidNestedKey",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidpointer",
                    "title" : "case invalidPointer",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidpushtime",
                    "title" : "case invalidPushTime",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidquery",
                    "title" : "case invalidQuery",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidrolename",
                    "title" : "case invalidRoleName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidschemaoperation",
                    "title" : "case invalidSchemaOperation",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidsessiontoken",
                    "title" : "case invalidSessionToken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidskiperror",
                    "title" : "case invalidSkipError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidsubscriptiontype",
                    "title" : "case invalidSubscriptionType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidvalue",
                    "title" : "case invalidValue",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/linkedidmissing",
                    "title" : "case linkedIdMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/mfaerror",
                    "title" : "case mfaError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/mfatokenrequired",
                    "title" : "case mfaTokenRequired",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingcontentlength",
                    "title" : "case missingContentLength",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingcontenttype",
                    "title" : "case missingContentType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingobjectid",
                    "title" : "case missingObjectId",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingrequiredfielderror",
                    "title" : "case missingRequiredFieldError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/objectnotfound",
                    "title" : "case objectNotFound",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/objecttoolarge",
                    "title" : "case objectTooLarge",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/operationforbidden",
                    "title" : "case operationForbidden",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/other",
                    "title" : "case other",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/othercause",
                    "title" : "case otherCause",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/pushmisconfigured",
                    "title" : "case pushMisconfigured",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/requestlimitexceeded",
                    "title" : "case requestLimitExceeded",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/scriptfailed",
                    "title" : "case scriptFailed",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/serviceunavailable",
                    "title" : "case serviceUnavailable",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/timeout",
                    "title" : "case timeout",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/unsavedfilefailure",
                    "title" : "case unsavedFileFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/unsupportedservice",
                    "title" : "case unsupportedService",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usercanonlybecreatedthroughsignup",
                    "title" : "case userCanOnlyBeCreatedThroughSignUp",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usercannotbealteredwithoutsession",
                    "title" : "case userCannotBeAlteredWithoutSession",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/useremailmissing",
                    "title" : "case userEmailMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/useremailtaken",
                    "title" : "case userEmailTaken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/userpasswordmissing",
                    "title" : "case userPasswordMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/userwithemailnotfound",
                    "title" : "case userWithEmailNotFound",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usernamemissing",
                    "title" : "case usernameMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usernametaken",
                    "title" : "case usernameTaken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/validationfailed",
                    "title" : "case validationFailed",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/webhookerror",
                    "title" : "case webhookError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/xdomainrequest",
                    "title" : "case xDomainRequest",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: Int)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/localizeddescription",
                        "title" : "var localizedDescription: String",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-4z7ws",
                        "title" : "func containedIn(ParseError.Code...) -> ParseError?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-5rs0d",
                        "title" : "func containedIn(ParseError.Code...) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-6j9cy",
                        "title" : "func containedIn([ParseError.Code]) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-749cm",
                        "title" : "func containedIn([ParseError.Code]) -> ParseError?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/equalsto(_:)-43i1q",
                        "title" : "func equalsTo(ParseError.Code) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/equalsto(_:)-5x7gp",
                        "title" : "func equalsTo(ParseError.Code) -> ParseError?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/error-implementations",
                    "title" : "Error Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/init(from:)",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/encode(to:)",
                        "title" : "func encode(to: Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum",
                "title" : "ParseError.Code",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/debugdescription-2nfx4",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/debugdescription-40hjo",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-18mqc",
                    "title" : "func containedIn(ParseError.Code...) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-5oudf",
                    "title" : "func containedIn([ParseError.Code]) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-6itoq",
                    "title" : "func containedIn([ParseError.Code]) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-95ktw",
                    "title" : "func containedIn(ParseError.Code...) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/equalsto(_:)-786kn",
                    "title" : "func equalsTo(ParseError.Code) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/equalsto(_:)-9xnax",
                    "title" : "func equalsTo(ParseError.Code) -> ParseError?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/errordescription-nht8",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/errordescription-tx34",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseerror",
            "title" : "ParseError",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:accesstoken:expiresin:options:)",
                "title" : "func link(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:accesstoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func link(userId: String, accessToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:authenticationtoken:expiresin:options:)",
                "title" : "func link(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:authenticationtoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func link(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/linkpublisher(userid:accesstoken:expiresin:options:)",
                "title" : "func linkPublisher(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/linkpublisher(userid:authenticationtoken:expiresin:options:)",
                "title" : "func linkPublisher(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:accesstoken:expiresin:options:)",
                "title" : "func login(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:accesstoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func login(userId: String, accessToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:authenticationtoken:expiresin:options:)",
                "title" : "func login(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:authenticationtoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func login(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/loginpublisher(userid:accesstoken:expiresin:options:)",
                "title" : "func loginPublisher(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/loginpublisher(userid:authenticationtoken:expiresin:options:)",
                "title" : "func loginPublisher(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/islinked",
                    "title" : "var isLinked: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/islinked(with:)",
                    "title" : "func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/strip()",
                    "title" : "func strip()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefacebook\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefacebook",
            "title" : "ParseFacebook",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefield\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/acl",
                    "title" : "case acl",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/array",
                    "title" : "case array",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/boolean",
                    "title" : "case boolean",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/bytes",
                    "title" : "case bytes",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/date",
                    "title" : "case date",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/file",
                    "title" : "case file",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/geopoint",
                    "title" : "case geoPoint",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/number",
                    "title" : "case number",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/object",
                    "title" : "case object",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/pointer",
                    "title" : "case pointer",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/polygon",
                    "title" : "case polygon",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/relation",
                    "title" : "case relation",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/string",
                    "title" : "case string",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/init(from:)",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/encode(to:)",
                        "title" : "func encode(to: Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/fieldtype",
                "title" : "ParseField.FieldType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefield",
            "title" : "ParseField",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/init(required:defaulevalue:)-3ggr5",
                "title" : "init(required: Bool, defauleValue: V?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/init(required:defaulevalue:)-96ibo",
                "title" : "init(required: Bool, defauleValue: V?) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/debugdescription",
                "title" : "var debugDescription: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/defaultvalue",
                "title" : "var defaultValue: V?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/required",
                "title" : "var required: Bool",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefieldoptions",
            "title" : "ParseFieldOptions",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/init(name:cloudurl:metadata:tags:options:)",
                "title" : "init(name: String, cloudURL: URL, metadata: [String : String]?, tags: [String : String]?, options: API.Options)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/init(name:data:mimetype:metadata:tags:options:)",
                "title" : "init(name: String, data: Data, mimeType: String?, metadata: [String : String]?, tags: [String : String]?, options: API.Options)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/init(name:localurl:metadata:tags:options:)",
                "title" : "init(name: String, localURL: URL, metadata: [String : String]?, tags: [String : String]?, options: API.Options)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/cloudurl",
                "title" : "var cloudURL: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/data",
                "title" : "var data: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/id-5kvj3",
                "title" : "var id: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/localurl",
                "title" : "var localURL: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/metadata",
                "title" : "var metadata: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/mimetype",
                "title" : "var mimeType: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/name",
                "title" : "var name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/options",
                "title" : "var options: API.Options",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/tags",
                "title" : "var tags: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/url",
                "title" : "var url: URL?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/delete(options:)-7ukf",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/delete(options:callbackqueue:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetch(includekeys:options:callbackqueue:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue) throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetch(options:callbackqueue:progress:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, progress: ((URLSessionDownloadTask, Int64, Int64, Int64) -> Void)) throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetch(options:callbackqueue:progress:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, progress: ((URLSessionDownloadTask, Int64, Int64, Int64) -> Void)?, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetch(options:progress:)",
                "title" : "func fetch(options: API.Options, progress: ((URLSessionDownloadTask, Int64, Int64, Int64) -> Void)) async throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetch(options:stream:callbackqueue:)",
                "title" : "func fetch(options: API.Options, stream: InputStream, callbackQueue: DispatchQueue) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetchpublisher(options:progress:)",
                "title" : "func fetchPublisher(options: API.Options, progress: ((URLSessionDownloadTask, Int64, Int64, Int64) -> Void)) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/save(options:)-4umwf",
                "title" : "func save(options: API.Options) async throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/save(options:callbackqueue:progress:)",
                "title" : "func save(options: API.Options, callbackQueue: DispatchQueue, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?) throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/save(options:callbackqueue:progress:completion:)",
                "title" : "func save(options: API.Options, callbackQueue: DispatchQueue, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/save(options:progress:)",
                "title" : "func save(options: API.Options, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?) async throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/save(options:stream:callbackqueue:progress:)",
                "title" : "func save(options: API.Options, stream: InputStream, callbackQueue: DispatchQueue, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/savepublisher(options:)",
                "title" : "func savePublisher(options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/savepublisher(options:progress:)",
                "title" : "func savePublisher(options: API.Options, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/debugdescription-5c855",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/debugdescription-67efx",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/description-28w87",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/description-8pkhz",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/delete()",
                    "title" : "func delete() throws -> DeletingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/delete(options:)-4jlth",
                    "title" : "func delete(options: API.Options) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/deletable-implementations",
                "title" : "Deletable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/fetch()",
                    "title" : "func fetch() throws -> FetchingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/fetch(includekeys:options:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) throws -> ParseFile",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/id-7xdxx",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/debugdescription-4zrao",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/description-6ba8p",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/parseencodable-implementations",
                "title" : "ParseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/save()",
                    "title" : "func save() throws -> SavingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/save(options:)-9u9ws",
                    "title" : "func save(options: API.Options) throws -> ParseFile",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefile",
            "title" : "ParseFile",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/init()",
                "title" : "init?()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/defaultdatadirectorypath",
                "title" : "var defaultDataDirectoryPath: URL?",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/downloaddirectory()",
                "title" : "static func downloadDirectory() throws -> URL",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/fileexists(_:)-3nh5r",
                "title" : "static func fileExists(String) throws -> URL",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/fileexists(_:)-4h3hl",
                "title" : "static func fileExists(ParseFile) throws -> URL",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefilemanager",
            "title" : "ParseFileManager",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init(coordinate:)",
                "title" : "init(coordinate: CLLocationCoordinate2D) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init(latitude:longitude:)",
                "title" : "init(latitude: Double, longitude: Double) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init(location:)",
                "title" : "init(location: CLLocation) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/latitude",
                "title" : "var latitude: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/longitude",
                "title" : "var longitude: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/tocllocation",
                "title" : "var toCLLocation: CLLocation",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/tocllocationcoordinate2d",
                "title" : "var toCLLocationCoordinate2D: CLLocationCoordinate2D",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/distanceinkilometers(_:)",
                "title" : "func distanceInKilometers(ParseGeoPoint) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/distanceinmiles(_:)",
                "title" : "func distanceInMiles(ParseGeoPoint) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/distanceinradians(_:)",
                "title" : "func distanceInRadians(ParseGeoPoint) -> Double",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsegeopoint",
            "title" : "ParseGeoPoint",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/link(id:accesstoken:options:)",
                "title" : "func link(id: String, accessToken: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/link(id:accesstoken:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/linkpublisher(id:accesstoken:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/login(id:accesstoken:options:)",
                "title" : "func login(id: String, accessToken: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/login(id:accesstoken:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/loginpublisher(id:accesstoken:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/islinked",
                    "title" : "var isLinked: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/islinked(with:)",
                    "title" : "func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/strip()",
                    "title" : "func strip()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegithub\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsegithub",
            "title" : "ParseGitHub",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/link(id:idtoken:accesstoken:options:)",
                "title" : "func link(id: String, idToken: String?, accessToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/link(id:idtoken:accesstoken:options:callbackqueue:completion:)",
                "title" : "func link(id: String, idToken: String?, accessToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/linkpublisher(id:idtoken:accesstoken:options:)",
                "title" : "func linkPublisher(id: String, idToken: String?, accessToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/login(id:idtoken:accesstoken:options:)",
                "title" : "func login(id: String, idToken: String?, accessToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/login(id:idtoken:accesstoken:options:callbackqueue:completion:)",
                "title" : "func login(id: String, idToken: String?, accessToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/loginpublisher(id:idtoken:accesstoken:options:)",
                "title" : "func loginPublisher(id: String, idToken: String?, accessToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/islinked",
                    "title" : "var isLinked: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/islinked(with:)",
                    "title" : "func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/strip()",
                    "title" : "func strip()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegoogle\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsegoogle",
            "title" : "ParseGoogle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehealth\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehealth\/check(options:)-7gul1",
                "title" : "static func check(options: API.Options) async throws -> Status",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehealth\/check(options:)-7id9f",
                "title" : "static func check(options: API.Options) throws -> Status",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehealth\/check(options:callbackqueue:allowintermediateresponses:completion:)",
                "title" : "static func check(options: API.Options, callbackQueue: DispatchQueue, allowIntermediateResponses: Bool, completion: (Result<Status, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehealth\/checkpublisher(options:)",
                "title" : "static func checkPublisher(options: API.Options) -> AnyPublisher<Status, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/status\/error",
                    "title" : "case error",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/status\/initialized",
                    "title" : "case initialized",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/status\/ok",
                    "title" : "case ok",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/status\/starting",
                    "title" : "case starting",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/status\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsehealth\/status\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsehealth\/status\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsehealth\/status\/init(from:)",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsehealth\/status\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsehealth\/status\/encode(to:)",
                        "title" : "func encode(to: Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsehealth\/status\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsehealth\/status\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehealth\/status",
                "title" : "ParseHealth.Status",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehealth\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehealth\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehealth\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehealth",
            "title" : "ParseHealth",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/functionname",
                "title" : "var functionName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/parameters",
                "title" : "var parameters: P",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/user",
                "title" : "var user: U?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/getcontext()",
                "title" : "func getContext<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/getlog()",
                "title" : "func getLog<V>() throws -> V",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/userttype",
                "title" : "ParseHookFunctionRequest.UsertType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/hydrateuser(options:)",
                    "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/hydrateuser(options:callbackqueue:completion:)",
                    "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/hydrateuserpublisher(options:)",
                    "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/options()",
                    "title" : "func options() -> API.Options",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/parsehookrequestable-implementations",
                "title" : "ParseHookRequestable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookfunctionrequest",
            "title" : "ParseHookFunctionRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/init(error:)",
                "title" : "init(error: ParseError)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/init(success:)",
                "title" : "init(success: R)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/error",
                "title" : "var error: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/success",
                "title" : "var success: R?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-1ahdr",
                    "title" : "func containedIn(ParseError.Code...) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-1zvnk",
                    "title" : "func containedIn([ParseError.Code]) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-2ui18",
                    "title" : "func containedIn([ParseError.Code]) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-3necj",
                    "title" : "func containedIn(ParseError.Code...) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/equalsto(_:)-4kve4",
                    "title" : "func equalsTo(ParseError.Code) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/equalsto(_:)-6whsf",
                    "title" : "func equalsTo(ParseError.Code) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/errordescription-4cwpp",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/errordescription-7cvu5",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookresponse",
            "title" : "ParseHookResponse",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/clients",
                "title" : "var clients: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/event",
                "title" : "var event: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/isget",
                "title" : "var isGet: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/object",
                "title" : "var object: T?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/objects",
                "title" : "var objects: [T]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/original",
                "title" : "var original: T?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/query",
                "title" : "var query: Query<T>?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/sendevent",
                "title" : "var sendEvent: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/subscriptions",
                "title" : "var subscriptions: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/triggername",
                "title" : "var triggerName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/user",
                "title" : "var user: U?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/getcontext()",
                "title" : "func getContext<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/getlog()",
                "title" : "func getLog<V>() throws -> V",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/usertype",
                "title" : "ParseHookTriggerObjectRequest.UserType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/hydrateuser(options:)",
                    "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/hydrateuser(options:callbackqueue:completion:)",
                    "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/hydrateuserpublisher(options:)",
                    "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/options()",
                    "title" : "func options() -> API.Options",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/parsehookrequestable-implementations",
                "title" : "ParseHookRequestable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest",
            "title" : "ParseHookTriggerObjectRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/clients",
                "title" : "var clients: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/file",
                "title" : "var file: ParseFile?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/filesize",
                "title" : "var fileSize: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/triggername",
                "title" : "var triggerName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/user",
                "title" : "var user: U?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/getcontext()",
                "title" : "func getContext<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/getlog()",
                "title" : "func getLog<V>() throws -> V",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/usertype",
                "title" : "ParseHookTriggerRequest.UserType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/hydrateuser(options:)",
                    "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/hydrateuser(options:callbackqueue:completion:)",
                    "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/hydrateuserpublisher(options:)",
                    "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/options()",
                    "title" : "func options() -> API.Options",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/parsehookrequestable-implementations",
                "title" : "ParseHookRequestable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerrequest",
            "title" : "ParseHookTriggerRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/link(id:accesstoken:apiurl:options:)",
                "title" : "func link(id: String, accessToken: String, apiURL: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/link(id:accesstoken:apiurl:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, apiURL: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/linkpublisher(id:accesstoken:apiurl:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, apiURL: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/login(id:accesstoken:apiurl:options:)",
                "title" : "func login(id: String, accessToken: String, apiURL: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/login(id:accesstoken:apiurl:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, apiURL: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/loginpublisher(id:accesstoken:apiurl:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, apiURL: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/graphapibaseurl",
                "title" : "static var graphAPIBaseURL: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/islinked",
                    "title" : "var isLinked: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/islinked(with:)",
                    "title" : "func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/strip()",
                    "title" : "func strip()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseinstagram\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseinstagram",
            "title" : "ParseInstagram",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/link(id:password:options:)",
                "title" : "func link(id: String, password: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/link(id:password:options:callbackqueue:completion:)",
                "title" : "func link(id: String, password: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/linkpublisher(id:password:options:)",
                "title" : "func linkPublisher(id: String, password: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/login(id:password:options:)",
                "title" : "func login(id: String, password: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/login(id:password:options:callbackqueue:completion:)",
                "title" : "func login(id: String, password: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/loginpublisher(id:password:options:)",
                "title" : "func loginPublisher(id: String, password: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/islinked",
                    "title" : "var isLinked: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/islinked(with:)",
                    "title" : "func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/strip()",
                    "title" : "func strip()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseldap\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseldap",
            "title" : "ParseLDAP",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/link(id:accesstoken:ismobilesdk:options:)",
                "title" : "func link(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/link(id:accesstoken:ismobilesdk:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/linkpublisher(id:accesstoken:ismobilesdk:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/login(id:accesstoken:ismobilesdk:options:)",
                "title" : "func login(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/login(id:accesstoken:ismobilesdk:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/loginpublisher(id:accesstoken:ismobilesdk:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/islinked",
                    "title" : "var isLinked: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/islinked(with:)",
                    "title" : "func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/strip()",
                    "title" : "func strip()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselinkedin\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parselinkedin",
            "title" : "ParseLinkedIn",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/init(target:)",
                "title" : "init(target: T)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/add(_:objects:)-35lsc",
                "title" : "func add<W>(String, objects: [W]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/add(_:objects:)-9ko4e",
                "title" : "func add<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addrelation(_:objects:)-47ckx",
                "title" : "func addRelation<W>(String, objects: [W]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addrelation(_:objects:)-gw2h",
                "title" : "func addRelation<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addunique(_:objects:)-2tfhg",
                "title" : "func addUnique<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addunique(_:objects:)-6zoa7",
                "title" : "func addUnique<W>(String, objects: [W]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/forceset(_:to:)",
                "title" : "func forceSet<W>((String, WritableKeyPath<T, W?>), to: W?) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/forceset(_:value:)",
                "title" : "func forceSet<W>((String, WritableKeyPath<T, W?>), value: W?) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/increment(_:by:)",
                "title" : "func increment(String, by: Int) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/remove(_:objects:)-3e0qg",
                "title" : "func remove<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/remove(_:objects:)-ope6",
                "title" : "func remove<W>(String, objects: [W]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/removerelation(_:objects:)-1wbm6",
                "title" : "func removeRelation<W>(String, objects: [W]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/removerelation(_:objects:)-3ty5e",
                "title" : "func removeRelation<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/save(options:)-2i4un",
                "title" : "func save(options: API.Options) async throws -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/save(options:callbackqueue:completion:)",
                "title" : "func save(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<T, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/savepublisher(options:)",
                "title" : "func savePublisher(options: API.Options) -> Future<T, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/set(_:to:)-1t3ca",
                "title" : "func set<W>((String, WritableKeyPath<T, W?>), to: W?) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/set(_:to:)-6e7l2",
                "title" : "func set<W>(WritableKeyPath<T, W?>, to: W) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/unset(_:)-1fmaa",
                "title" : "func unset<V>((String, WritableKeyPath<T, V?>)) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/unset(_:)-7dqb3",
                "title" : "func unset(String) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperation\/save()",
                    "title" : "func save() throws -> SavingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperation\/save(options:)-6qs6f",
                    "title" : "func save(options: API.Options) throws -> T",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperation\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperation",
            "title" : "ParseOperation",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/init(_:)-61vkc",
                "title" : "init([ParseGeoPoint]) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/init(_:)-8n95l",
                "title" : "init(ParseGeoPoint...) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/coordinates",
                "title" : "let coordinates: [ParseGeoPoint]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/containspoint(_:)",
                "title" : "func containsPoint(ParseGeoPoint) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepolygon",
            "title" : "ParsePolygon",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:pushtime:expirationdate:)",
                "title" : "init(payload: V, pushTime: Date?, expirationDate: Date?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:pushtime:expirationinterval:)",
                "title" : "init(payload: V, pushTime: Date?, expirationInterval: Int?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:query:pushtime:expirationdate:)",
                "title" : "init<U>(payload: V, query: Query<U>, pushTime: Date?, expirationDate: Date?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:query:pushtime:expirationinterval:)",
                "title" : "init<U>(payload: V, query: Query<U>, pushTime: Date?, expirationInterval: Int?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/channels",
                "title" : "var channels: Set<String>?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/expirationinterval",
                "title" : "var expirationInterval: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/payload",
                "title" : "var payload: V?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/pushtime",
                "title" : "var pushTime: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/where",
                "title" : "var `where`: QueryWhere?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/fetchstatus(_:options:)",
                "title" : "func fetchStatus(String, options: API.Options) async throws -> ParsePushStatus<V>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/fetchstatus(_:options:callbackqueue:completion:)",
                "title" : "func fetchStatus(String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ParsePushStatus<V>, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/fetchstatuspublisher(_:options:)",
                "title" : "func fetchStatusPublisher(String, options: API.Options) -> Future<ParsePushStatus<V>, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/send(options:)",
                "title" : "func send(options: API.Options) async throws -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/send(options:callbackqueue:completion:)",
                "title" : "func send(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<String, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/sendpublisher(options:)",
                "title" : "func sendPublisher(options: API.Options) -> Future<String, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepush\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepush\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepush\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepush\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepush\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepush\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepush",
            "title" : "ParsePush",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/init(body:)",
                "title" : "init(body: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/action",
                "title" : "var action: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/actionlockey",
                "title" : "var actionLocKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/body",
                "title" : "var body: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/launchimage",
                "title" : "var launchImage: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/locargs",
                "title" : "var locArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/lockey",
                "title" : "var locKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/subtitle",
                "title" : "var subtitle: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/subtitlelocargs",
                "title" : "var subtitleLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/subtitlelockey",
                "title" : "var subtitleLocKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/titlelocargs",
                "title" : "var titleLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/titlelockey",
                "title" : "var titleLocKey: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplealert\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplealert\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplealert\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushapplealert",
            "title" : "ParsePushAppleAlert",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplesound\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplesound\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplesound\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushapplesound",
            "title" : "ParsePushAppleSound",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/init(title:body:icon:)",
                "title" : "init(title: String?, body: String?, icon: String?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/init(title:body:image:)",
                "title" : "init(title: String?, body: String?, image: String?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/androidchannelid",
                "title" : "var androidChannelId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/badge",
                "title" : "var badge: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/body",
                "title" : "var body: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/bodylocargs",
                "title" : "var bodyLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/bodylockey",
                "title" : "var bodyLocKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/clickaction",
                "title" : "var clickAction: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/color",
                "title" : "var color: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/icon",
                "title" : "var icon: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/image",
                "title" : "var image: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/sound",
                "title" : "var sound: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/subtitle",
                "title" : "var subtitle: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/tag",
                "title" : "var tag: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/titlelocargs",
                "title" : "var titleLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/titlelockey",
                "title" : "var titleLocKey: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushfirebasenotification",
            "title" : "ParsePushFirebaseNotification",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/alert",
                "title" : "var alert: ParsePushAppleAlert?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/category",
                "title" : "var category: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/collapseid",
                "title" : "var collapseId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/collapsekey",
                "title" : "var collapseKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/data",
                "title" : "var data: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/delaywhileidle",
                "title" : "var delayWhileIdle: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/dryrun",
                "title" : "var dryRun: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/interruptionlevel",
                "title" : "var interruptionLevel: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/mdm",
                "title" : "var mdm: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/notification",
                "title" : "var notification: ParsePushFirebaseNotification?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/pushtype",
                "title" : "var pushType: ParsePushPayloadApple.PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/relevancescore",
                "title" : "var relevanceScore: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/restrictedpackagename",
                "title" : "var restrictedPackageName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/targetcontentid",
                "title" : "var targetContentId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/threadid",
                "title" : "var threadId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/topic",
                "title" : "var topic: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/uri",
                "title" : "var uri: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/urlargs",
                "title" : "var urlArgs: [String]?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/converttoapple()",
                "title" : "func convertToApple() -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/converttofirebase()",
                "title" : "func convertToFirebase() -> ParsePushPayloadFirebase",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadany\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadany\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadany\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadany",
            "title" : "ParsePushPayloadAny",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init(alert:)",
                "title" : "init(alert: ParsePushAppleAlert)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init(body:)",
                "title" : "init(body: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/alert",
                "title" : "var alert: ParsePushAppleAlert?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/body",
                "title" : "var body: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/category",
                "title" : "var category: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/collapseid",
                "title" : "var collapseId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/contentavailable",
                "title" : "var contentAvailable: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/interruptionlevel",
                "title" : "var interruptionLevel: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/mdm",
                "title" : "var mdm: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/mutablecontent",
                "title" : "var mutableContent: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/priority",
                "title" : "var priority: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.property",
                "title" : "var pushType: PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/relevancescore",
                "title" : "var relevanceScore: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/targetcontentid",
                "title" : "var targetContentId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/threadid",
                "title" : "var threadId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/topic",
                "title" : "var topic: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/urlargs",
                "title" : "var urlArgs: [String]?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/getsound()",
                "title" : "func getSound<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/incrementbadge()",
                "title" : "func incrementBadge() -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/setbadge(_:)",
                "title" : "func setBadge(Int) -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/setsound(_:)-27wko",
                "title" : "func setSound(ParsePushAppleSound) -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/setsound(_:)-4d1ma",
                "title" : "func setSound<V>(V) -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/alert",
                    "title" : "case alert",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/background",
                    "title" : "case background",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/init(from:)",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/encode(to:)",
                        "title" : "func encode(to: Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum",
                "title" : "ParsePushPayloadApple.PushType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadapple",
            "title" : "ParsePushPayloadApple",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/init(notification:)",
                "title" : "init(notification: ParsePushFirebaseNotification)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/collapsekey",
                "title" : "var collapseKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/contentavailable",
                "title" : "var contentAvailable: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/data",
                "title" : "var data: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/delaywhileidle",
                "title" : "var delayWhileIdle: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/dryrun",
                "title" : "var dryRun: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/mutablecontent",
                "title" : "var mutableContent: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/notification",
                "title" : "var notification: ParsePushFirebaseNotification?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/priority",
                "title" : "var priority: `Self`.PushPriority?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/restrictedpackagename",
                "title" : "var restrictedPackageName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/uri",
                "title" : "var uri: URL?",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/high",
                    "title" : "case high",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/normal",
                    "title" : "case normal",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/init(from:)",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/encode(to:)",
                        "title" : "func encode(to: Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority",
                "title" : "ParsePushPayloadFirebase.PushPriority",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase",
            "title" : "ParsePushPayloadFirebase",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/acl",
                "title" : "var ACL: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/count",
                "title" : "var count: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/errormessage",
                "title" : "var errorMessage: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/expirationinterval",
                "title" : "var expirationInterval: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/expiry",
                "title" : "var expiry: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/failedpertype",
                "title" : "var failedPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/failedperutcoffset",
                "title" : "var failedPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/numfailed",
                "title" : "var numFailed: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/numsent",
                "title" : "var numSent: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/objectid",
                "title" : "var objectId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/originaldata",
                "title" : "var originalData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/payload",
                "title" : "var payload: PayloadType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/pushhash",
                "title" : "var pushHash: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/pushtime",
                "title" : "var pushTime: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/query-swift.property",
                "title" : "var query: QueryWhere?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/sentpertype",
                "title" : "var sentPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/sentperutcoffset",
                "title" : "var sentPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/status",
                "title" : "var status: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/payloadtype",
                "title" : "ParsePushStatus.PayloadType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/debugdescription-2tlk7",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/debugdescription-6688q",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/description-2p7v0",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/description-owjn",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/delete()",
                    "title" : "func delete() throws -> DeletingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/deletable-implementations",
                "title" : "Deletable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetch()",
                    "title" : "func fetch() throws -> FetchingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/id-7tlx4",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/classname-swift.property",
                    "title" : "var className: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/issaved",
                    "title" : "var isSaved: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/classname-swift.type.property-2eb96",
                    "title" : "static var className: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/classname-swift.type.property-978do",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/debugdescription-2urok",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/description-5dp66",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/parseencodable-implementations",
                "title" : "ParseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/init(objectid:)",
                    "title" : "init(objectId: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/id-27z0a",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/mergeable",
                    "title" : "var mergeable: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/operation",
                    "title" : "var operation: ParseOperation<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation",
                    "title" : "var relation: ParseRelation<Self>?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/create(options:)",
                    "title" : "func create(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/create(options:callbackqueue:completion:)",
                    "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/createpublisher(options:)",
                    "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/delete(options:)",
                    "title" : "func delete(options: API.Options) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/delete(options:callbackqueue:completion:)",
                    "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/deletepublisher(options:)",
                    "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetch(includekeys:options:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetch(includekeys:options:callbackqueue:completion:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetchpublisher(includekeys:options:)",
                    "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/get(_:)",
                    "title" : "func get<W>(KeyPath<Self, W?>) throws -> W",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/getdecoder()",
                    "title" : "func getDecoder() -> JSONDecoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/getencoder()",
                    "title" : "func getEncoder() -> ParseEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/getjsonencoder()",
                    "title" : "func getJSONEncoder() -> JSONEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/hassameobjectid(as:)",
                    "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/isdirtyforkey(_:)",
                    "title" : "func isDirtyForKey<W>(KeyPath<Self, W?>) throws -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/merge(with:)",
                    "title" : "func merge(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/mergeparse(with:)",
                    "title" : "func mergeParse(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:child:)",
                    "title" : "func relation<U>(String, child: U) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:classname:)",
                    "title" : "func relation(String, className: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:)",
                    "title" : "func relation(ParseRelation<Self>?, key: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-swift.method-473ct",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-swift.method-6n2lm",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/replace(options:)",
                    "title" : "func replace(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/replace(options:callbackqueue:completion:)",
                    "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/replacepublisher(options:)",
                    "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/revert()",
                    "title" : "func revert() throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/revert(_:)",
                    "title" : "func revert<W>(WritableKeyPath<Self, W?>) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save(ignoringcustomobjectidconfig:options:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save(options:)",
                    "title" : "func save(options: API.Options) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/savepublisher(ignoringcustomobjectidconfig:options:)",
                    "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/set(_:to:)",
                    "title" : "func set<W>(WritableKeyPath<Self, W?>, to: W) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/shouldrestorekey(_:original:)",
                    "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/topointer()",
                    "title" : "func toPointer() throws -> Pointer<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/query-swift.type.property",
                    "title" : "static var query: Query<Self>",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/query(_:)-1f2xg",
                    "title" : "static func query([QueryConstraint]) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/query(_:)-m51y",
                    "title" : "static func query(QueryConstraint...) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/queryrelations(_:parent:)-4cj59",
                    "title" : "static func queryRelations<U>(String, parent: U) throws -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/queryrelations(_:parent:)-p3o1",
                    "title" : "static func queryRelations<U>(String, parent: Pointer<U>) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-swift.type.method-4n4k6",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-swift.type.method-9k0oc",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/parseobject-implementations",
                "title" : "ParseObject Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save()",
                    "title" : "func save() throws -> SavingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushstatus",
            "title" : "ParsePushStatus",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:)-25hfj",
                "title" : "init(parent: Pointer<T>, key: String?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:)-9iv6m",
                "title" : "init(parent: T, key: String?) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-6zxtt",
                "title" : "init<U>(parent: Pointer<T>, key: String?, child: U)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-7ek9i",
                "title" : "init<U>(parent: Pointer<T>, key: String?, child: Pointer<U>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-8evhy",
                "title" : "init<U>(parent: T, key: String?, child: U) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-912hj",
                "title" : "init<U>(parent: T, key: String?, child: Pointer<U>) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:classname:)-5ijuf",
                "title" : "init(parent: T, key: String?, className: String) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:classname:)-7xhg8",
                "title" : "init(parent: Pointer<T>, key: String?, className: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/classname",
                "title" : "var className: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/parent",
                "title" : "var parent: Pointer<T>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:)-89hhl",
                "title" : "func add<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:)-fiw5",
                "title" : "func add<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:)-ob98",
                "title" : "func add<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:objects:)",
                "title" : "func add<U>(String, objects: [U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query()",
                "title" : "func query<U>() throws -> Query<U>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:)",
                "title" : "func query<U>(String) throws -> Query<U>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-swift.method-2ymy3",
                "title" : "func query<U>(String, parent: U) throws -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-swift.method-6niph",
                "title" : "func query<U>(String, parent: Pointer<U>) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:)-5sx9o",
                "title" : "func remove<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:)-8lzzm",
                "title" : "func remove<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:)-ks5y",
                "title" : "func remove<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:objects:)",
                "title" : "func remove<U>(String, objects: [U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-swift.type.method-4a90y",
                "title" : "static func query<U>(String, parent: Pointer<U>) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-swift.type.method-52scm",
                "title" : "static func query<U>(String, parent: U) throws -> Query<T>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserelation\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserelation\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserelation\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserelation\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserelation\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserelation\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parserelation",
            "title" : "ParseRelation",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/init(classlevelpermissions:)",
                "title" : "init(classLevelPermissions: ParseCLP)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/classlevelpermissions",
                "title" : "var classLevelPermissions: ParseCLP?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/classname-swift.property",
                "title" : "var className: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addfield(_:type:options:)-2gkz6",
                "title" : "func addField<T>(String, type: ParseField.FieldType, options: ParseFieldOptions<T>) throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addfield(_:type:options:)-v4zh",
                "title" : "func addField<V>(String, type: ParseField.FieldType, options: ParseFieldOptions<V>) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addindex(_:field:index:)",
                "title" : "func addIndex(String, field: String, index: Encodable) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addpointer(_:options:)",
                "title" : "func addPointer<T>(String, options: ParseFieldOptions<T>) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addrelation(_:options:)",
                "title" : "func addRelation<T>(String, options: ParseFieldOptions<T>) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/createpublisher(includekeys:options:)",
                "title" : "func createPublisher(includeKeys: [String]?, options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/deletefield(_:)",
                "title" : "func deleteField(String) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/deleteindex(_:)",
                "title" : "func deleteIndex(String) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/deletepublisher(includekeys:options:)",
                "title" : "func deletePublisher(includeKeys: [String]?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/getfields()",
                "title" : "func getFields() -> [String : String]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/getindexes()",
                "title" : "func getIndexes() -> [String : [String : String]]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/purge(options:)",
                "title" : "func purge(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/purge(options:callbackqueue:completion:)",
                "title" : "func purge(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/purgepublisher(includekeys:options:)",
                "title" : "func purgePublisher(includeKeys: [String]?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/update(options:)",
                "title" : "func update(options: API.Options) async throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/update(options:callbackqueue:completion:)",
                "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/updatepublisher(includekeys:options:)",
                "title" : "func updatePublisher(includeKeys: [String]?, options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/classname-swift.type.property",
                "title" : "static var className: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseschema\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseschema\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseschema\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseschema\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseschema\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseschema\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseschema",
            "title" : "ParseSchema",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/link(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func link(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/link(id:accesstoken:expiresin:refreshtoken:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/linkpublisher(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/login(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func login(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/login(id:accesstoken:expiresin:refreshtoken:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/loginpublisher(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/islinked",
                    "title" : "var isLinked: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/islinked(with:)",
                    "title" : "func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/strip()",
                    "title" : "func strip()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsespotify\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsespotify",
            "title" : "ParseSpotify",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/link(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func link(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/link(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:callbackqueue:completion:)",
                "title" : "func link(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/linkpublisher(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func linkPublisher(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/login(userid:screenname:authtoken:authtokensecret:consumerkey:consumersecret:options:callbackqueue:completion:)",
                "title" : "func login(userId: String, screenName: String?, authToken: String, authTokenSecret: String, consumerKey: String, consumerSecret: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/login(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func login(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/loginpublisher(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func loginPublisher(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/islinked",
                    "title" : "var isLinked: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/islinked(with:)",
                    "title" : "func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/strip()",
                    "title" : "func strip()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetwitter\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsetwitter",
            "title" : "ParseTwitter",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseversion\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseversion\/current",
                "title" : "static var current: `Self`?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'...(_:)-1ju9p",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'...(_:)-7523g",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_(_:_:)-2eh5t",
                    "title" : "static func > (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_(_:_:)-2fa7s",
                    "title" : "static func < (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_(_:_:)-2ie1v",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-4xugm",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-5i0hp",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-7dags",
                    "title" : "static func >= (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-7eh1a",
                    "title" : "static func <= (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/debugdescription-3205l",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/debugdescription-7o1c2",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseversion",
            "title" : "ParseVersion",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/init(_:)",
                "title" : "init(T) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/init(objectid:)",
                "title" : "init(objectId: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/classname",
                "title" : "var className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/objectid",
                "title" : "var objectId: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/fetch(includekeys:options:)-f8pm",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/fetch(includekeys:options:callbackqueue:completion:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<T, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<T, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/hassameobjectid(as:)-9vqk4",
                "title" : "func hasSameObjectId(as: `Self`) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/hassameobjectid(as:)-zpjg",
                "title" : "func hasSameObjectId(as: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/toobject()",
                "title" : "func toObject() -> T",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/fetch()",
                    "title" : "func fetch() throws -> FetchingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/fetch(includekeys:options:)-1otrx",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) throws -> T",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/pointer",
            "title" : "Pointer",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/init(_:)-16e61",
                "title" : "init(QueryConstraint...)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/init(_:)-6muig",
                "title" : "init([QueryConstraint])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/classname-swift.property",
                "title" : "var className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe",
                "title" : "var subscribe: Subscription<ResultType>?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribecallback",
                "title" : "var subscribeCallback: SubscriptionCallback<ResultType>?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/viewmodel",
                "title" : "var viewModel: QueryViewModel<ResultType>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregate(_:options:)-128p2",
                "title" : "func aggregate([[String : Encodable]], options: API.Options) throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregate(_:options:)-4ycg9",
                "title" : "func aggregate([[String : Encodable]], options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregate(_:options:callbackqueue:completion:)",
                "title" : "func aggregate([[String : Encodable]], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregateexplain(_:usingmongodb:options:)-28oui",
                "title" : "func aggregateExplain<U>([[String : Encodable]], usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregateexplain(_:usingmongodb:options:)-7k6n3",
                "title" : "func aggregateExplain<U>([[String : Encodable]], usingMongoDB: Bool, options: API.Options) throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregateexplain(_:usingmongodb:options:callbackqueue:completion:)",
                "title" : "func aggregateExplain<U>([[String : Encodable]], usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregateexplainpublisher(_:usingmongodb:options:)",
                "title" : "func aggregateExplainPublisher<U>([[String : Encodable]], usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregatepublisher(_:options:)",
                "title" : "func aggregatePublisher([[String : Encodable]], options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/count(options:)-25obg",
                "title" : "func count(options: API.Options) async throws -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countexplain(usingmongodb:options:)-4fdb9",
                "title" : "func countExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countexplain(usingmongodb:options:)-97wa2",
                "title" : "func countExplain<U>(usingMongoDB: Bool, options: API.Options) throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func countExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countexplainpublisher(usingmongodb:options:)",
                "title" : "func countExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countpublisher(options:)",
                "title" : "func countPublisher(options: API.Options) -> Future<Int, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinct(_:options:)-783te",
                "title" : "func distinct(String, options: API.Options) throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinct(_:options:)-8r7nh",
                "title" : "func distinct(String, options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinct(_:options:callbackqueue:completion:)",
                "title" : "func distinct(String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctexplain(_:usingmongodb:options:)-4h769",
                "title" : "func distinctExplain<U>(String, usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctexplain(_:usingmongodb:options:)-5q4cg",
                "title" : "func distinctExplain<U>(String, usingMongoDB: Bool, options: API.Options) throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctexplain(_:usingmongodb:options:callbackqueue:completion:)",
                "title" : "func distinctExplain<U>(String, usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctexplainpublisher(_:usingmongodb:options:)",
                "title" : "func distinctExplainPublisher<U>(String, usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctpublisher(_:options:)",
                "title" : "func distinctPublisher(String, options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/exclude(_:)-1jvpb",
                "title" : "func exclude(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/exclude(_:)-717l0",
                "title" : "func exclude([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/fields(_:)-2q1ez",
                "title" : "func fields(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/fields(_:)-71x3d",
                "title" : "func fields([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/find(options:)-8vz5e",
                "title" : "func find(options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findall(batchlimit:options:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findall(batchlimit:options:callbackqueue:completion:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findallpublisher(batchlimit:options:)",
                "title" : "func findAllPublisher(batchLimit: Int?, options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findexplain(usingmongodb:options:)-58al",
                "title" : "func findExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findexplain(usingmongodb:options:)-ret0",
                "title" : "func findExplain<U>(usingMongoDB: Bool, options: API.Options) throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func findExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findexplainpublisher(usingmongodb:options:)",
                "title" : "func findExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findpublisher(options:)",
                "title" : "func findPublisher(options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/first(options:)-53w8y",
                "title" : "func first(options: API.Options) async throws -> ResultType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstexplain(usingmongodb:options:)-7sns5",
                "title" : "func firstExplain<U>(usingMongoDB: Bool, options: API.Options) throws -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstexplain(usingmongodb:options:)-ie81",
                "title" : "func firstExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func firstExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<U, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstexplainpublisher(usingmongodb:options:)",
                "title" : "func firstExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<U, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstpublisher(options:)",
                "title" : "func firstPublisher(options: API.Options) -> Future<ResultType, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/hint(_:)",
                "title" : "func hint<U>(U) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/include(_:)-323ik",
                "title" : "func include(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/include(_:)-47jms",
                "title" : "func include([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/includeall()",
                "title" : "func includeAll() -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/limit(_:)",
                "title" : "func limit(Int) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/order(_:)-75g9s",
                "title" : "func order([Order]?) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/order(_:)-779cz",
                "title" : "func order(Order...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/readpreference(_:includereadpreference:subqueryreadpreference:)",
                "title" : "func readPreference(String?, includeReadPreference: String?, subqueryReadPreference: String?) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/select(_:)-23ewt",
                "title" : "func select(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/select(_:)-689ic",
                "title" : "func select([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/skip(_:)",
                "title" : "func skip(Int) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/sortbytextscore()",
                "title" : "func sortByTextScore() -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe(_:)-swift.method",
                "title" : "func subscribe(ParseLiveQuery) throws -> Subscription<ResultType>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribecallback(_:)",
                "title" : "func subscribeCallback(ParseLiveQuery) throws -> SubscriptionCallback<ResultType>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe()",
                "title" : "func unsubscribe() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe(_:)",
                "title" : "func unsubscribe<T>(T) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe(_:client:)",
                "title" : "func unsubscribe<T>(T, client: ParseLiveQuery) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe(client:)",
                "title" : "func unsubscribe(client: ParseLiveQuery) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/update(_:)",
                "title" : "func update<T>(T) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/update(_:client:)",
                "title" : "func update<T>(T, client: ParseLiveQuery) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/watch(_:)-41gct",
                "title" : "func watch(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/watch(_:)-9h5yl",
                "title" : "func watch([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/where(_:)-60ukn",
                "title" : "func `where`(QueryConstraint...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/where(_:)-m71l",
                "title" : "func `where`([QueryConstraint]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcount(options:)",
                "title" : "func withCount(options: API.Options) async throws -> ([ResultType], Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcount(options:callbackqueue:completion:)",
                "title" : "func withCount(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<([ResultType], Int), ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountexplain(usingmongodb:options:)",
                "title" : "func withCountExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func withCountExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountexplainpublisher(usingmongodb:options:)",
                "title" : "func withCountExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountpublisher(options:)",
                "title" : "func withCountPublisher(options: API.Options) -> Future<([ResultType], Int), ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/classname-swift.type.property",
                "title" : "static var className: String",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe(_:)-swift.type.method",
                "title" : "static func subscribe<T>(T) throws -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe(_:client:)",
                "title" : "static func subscribe<T>(T, client: ParseLiveQuery) throws -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/viewmodel(_:)",
                "title" : "static func viewModel(`Self`) -> QueryViewModel<ResultType>",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/ascending(_:)",
                    "title" : "case ascending(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/descending(_:)",
                    "title" : "case descending(String)",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/query\/order\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/query\/order\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/order",
                "title" : "Query.Order",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/count(options:)-u7t5",
                    "title" : "func count(options: API.Options) throws -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/count(options:callbackqueue:completion:)",
                    "title" : "func count(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Int, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/find(options:)-6imwh",
                    "title" : "func find(options: API.Options) throws -> [ResultType]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/find(options:callbackqueue:completion:)",
                    "title" : "func find(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/first(options:)-5jw7y",
                    "title" : "func first(options: API.Options) throws -> ResultType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/first(options:callbackqueue:completion:)",
                    "title" : "func first(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ResultType, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/resulttype",
                    "title" : "Query.ResultType",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/queryable-implementations",
                "title" : "Queryable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/query",
            "title" : "Query",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryconstraint\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryconstraint\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryconstraint\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryconstraint\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryconstraint\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryconstraint\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryconstraint\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryconstraint\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryconstraint",
            "title" : "QueryConstraint",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querywhere\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/querywhere",
            "title" : "QueryWhere",
            "type" : "struct"
          },
          {
            "title" : "Variables",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parseswift\/configuration",
            "title" : "var configuration: ParseConfiguration",
            "type" : "var"
          },
          {
            "title" : "Functions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parseswift\/and(queries:)-4ugox",
            "title" : "func and<T>(queries: [Query<T>]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/and(queries:)-8cafq",
            "title" : "func and<T>(queries: Query<T>...) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/clearcache()",
            "title" : "func clearCache()",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedby(key:array:)-3irrl",
            "title" : "func containedBy<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedby(key:array:)-8m6r2",
            "title" : "func containedBy<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedin(key:array:)-36xo5",
            "title" : "func containedIn<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedin(key:array:)-f8wn",
            "title" : "func containedIn<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containsall(key:array:)-1g8ks",
            "title" : "func containsAll<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containsall(key:array:)-7bkbc",
            "title" : "func containsAll<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containsstring(key:substring:modifiers:)",
            "title" : "func containsString(key: String, substring: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/deleteobjectiveckeychain()",
            "title" : "func deleteObjectiveCKeychain() throws",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/doesnotexist(key:)",
            "title" : "func doesNotExist(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/doesnotmatchkeyinquery(key:querykey:query:)",
            "title" : "func doesNotMatchKeyInQuery<T>(key: String, queryKey: String, query: Query<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/equalto(key:object:usingeqcomparator:)",
            "title" : "func equalTo<T>(key: String, object: T, usingEqComparator: Bool) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/equalto(key:value:usingeqcomparator:)",
            "title" : "func equalTo<T>(key: String, value: T, usingEqComparator: Bool) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/exists(key:)",
            "title" : "func exists(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/hasprefix(key:prefix:modifiers:)",
            "title" : "func hasPrefix(key: String, prefix: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/hassuffix(key:suffix:modifiers:)",
            "title" : "func hasSuffix(key: String, suffix: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/initialize(applicationid:clientkey:primarykey:serverurl:livequeryserverurl:requiringcustomobjectids:usingtransactions:usingequalqueryconstraint:usingpostforquery:primitivestore:requestcachepolicy:cachememorycapacity:cachediskcapacity:usingd-5pbr0",
            "title" : "func initialize(applicationId: String, clientKey: String?, primaryKey: String?, serverURL: URL, liveQueryServerURL: URL?, requiringCustomObjectIds: Bool, usingTransactions: Bool, usingEqualQueryConstraint: Bool, usingPostForQuery: Bool, primitiveStore: ParsePrimitiveStorable?, requestCachePolicy: URLRequest.CachePolicy, cacheMemoryCapacity: Int, cacheDiskCapacity: Int, usingDataProtectionKeychain: Bool, deletingKeychainIfNeeded: Bool, httpAdditionalHeaders: [AnyHashable : Any]?, maxConnectionAttempts: Int, liveQueryMaxConnectionAttempts: Int, parseFileTransfer: ParseFileTransferable?, authentication: ((URLAuthenticationChallenge, (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) -> Void)?) throws",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/initialize(configuration:)",
            "title" : "func initialize(configuration: ParseConfiguration) throws",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/isnotnull(key:)",
            "title" : "func isNotNull(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/isnull(key:)",
            "title" : "func isNull(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matcheskeyinquery(key:querykey:query:)",
            "title" : "func matchesKeyInQuery<T>(key: String, queryKey: String, query: Query<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matchesregex(key:regex:modifiers:)",
            "title" : "func matchesRegex(key: String, regex: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matchestext(key:text:)",
            "title" : "func matchesText(key: String, text: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matchestext(key:text:options:)",
            "title" : "func matchesText(key: String, text: String, options: [ParseTextOption : Encodable]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/near(key:geopoint:)",
            "title" : "func near(key: String, geoPoint: ParseGeoPoint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/nor(queries:)-4b4r0",
            "title" : "func nor<T>(queries: [Query<T>]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/nor(queries:)-l87w",
            "title" : "func nor<T>(queries: Query<T>...) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/notcontainedin(key:array:)-2eqxa",
            "title" : "func notContainedIn<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/notcontainedin(key:array:)-lma5",
            "title" : "func notContainedIn<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/or(queries:)-1117v",
            "title" : "func or<T>(queries: Query<T>...) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/or(queries:)-8hqvz",
            "title" : "func or<T>(queries: [Query<T>]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/polygoncontains(key:point:)",
            "title" : "func polygonContains(key: String, point: ParseGeoPoint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(key:)",
            "title" : "func related(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(key:object:)-23s9i",
            "title" : "func related<T>(key: String, object: T) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(key:object:)-6tnr6",
            "title" : "func related<T>(key: String, object: Pointer<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(object:)-3ndwf",
            "title" : "func related<T>(object: Pointer<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(object:)-9ex2g",
            "title" : "func related<T>(object: T) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/relative(_:)",
            "title" : "func relative(QueryConstraint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/setaccessgroup(_:synchronizeacrossdevices:)",
            "title" : "func setAccessGroup(String?, synchronizeAcrossDevices: Bool) throws -> Bool",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/updateauthentication(_:)",
            "title" : "func updateAuthentication(((URLAuthenticationChallenge, (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) -> Void)?)",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withingeobox(key:fromsouthwest:tonortheast:)",
            "title" : "func withinGeoBox(key: String, fromSouthWest: ParseGeoPoint, toNortheast: ParseGeoPoint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinkilometers(key:geopoint:distance:sorted:)",
            "title" : "func withinKilometers(key: String, geoPoint: ParseGeoPoint, distance: Double, sorted: Bool) -> [QueryConstraint]",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinmiles(key:geopoint:distance:sorted:)",
            "title" : "func withinMiles(key: String, geoPoint: ParseGeoPoint, distance: Double, sorted: Bool) -> [QueryConstraint]",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinpolygon(key:points:)",
            "title" : "func withinPolygon(key: String, points: [ParseGeoPoint]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinpolygon(key:polygon:)",
            "title" : "func withinPolygon(key: String, polygon: ParsePolygon) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinradians(key:geopoint:distance:sorted:)",
            "title" : "func withinRadians(key: String, geoPoint: ParseGeoPoint, distance: Double, sorted: Bool) -> [QueryConstraint]",
            "type" : "func"
          },
          {
            "title" : "Operators",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parseswift\/!=(_:_:)-4oylc",
            "title" : "func != <T>(String, Query<T>) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/!=(_:_:)-6f2gk",
            "title" : "func != <T>(String, T) throws -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/!=(_:_:)-8iwik",
            "title" : "func != <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/==(_:_:)-5jg5t",
            "title" : "func == <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/==(_:_:)-8pl0h",
            "title" : "func == <T>(String, T) throws -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/==(_:_:)-998hz",
            "title" : "func == <T>(String, Query<T>) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_(_:_:)-35vq2",
            "title" : "func > <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_(_:_:)-4bsb2",
            "title" : "func < <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_=(_:_:)-434pw",
            "title" : "func >= <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_=(_:_:)-6tzg",
            "title" : "func <= <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/==(_:_:)",
                "title" : "static func == <T>(Event<T>, Event<T>) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/created(_:)",
                "title" : "case created(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/deleted(_:)",
                "title" : "case deleted(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/entered(_:)",
                "title" : "case entered(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/left(_:)",
                "title" : "case left(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/updated(_:)",
                "title" : "case updated(T)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/event\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/event\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/event",
            "title" : "Event",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterdelete",
                "title" : "case afterDelete",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterevent",
                "title" : "case afterEvent",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterfind",
                "title" : "case afterFind",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterlogin",
                "title" : "case afterLogin",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterlogout",
                "title" : "case afterLogout",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/aftersave",
                "title" : "case afterSave",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforeconnect",
                "title" : "case beforeConnect",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforedelete",
                "title" : "case beforeDelete",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforefind",
                "title" : "case beforeFind",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforelogin",
                "title" : "case beforeLogin",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforesave",
                "title" : "case beforeSave",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforesubscribe",
                "title" : "case beforeSubscribe",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggertype",
            "title" : "ParseHookTriggerType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/casesensitive",
                "title" : "case caseSensitive",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/diacriticsensitive",
                "title" : "case diacriticSensitive",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/language",
                "title" : "case language",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetextoption\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetextoption\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetextoption\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetextoption\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetextoption\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsetextoption",
            "title" : "ParseTextOption",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/parseswift",
        "title" : "ParseSwift",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 0
  }
}